{
  "openapi": "3.0.1",
  "info": {
    "title": "FunnyActivities API",
    "description": "A comprehensive API for managing materials in the FunnyActivities system. Supports CRUD operations, bulk operations, advanced filtering, and role-based access control.",
    "contact": {
      "name": "FunnyActivities Support",
      "email": "support@funnyactivities.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/activities": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": " (Requires: CanViewActivity)",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activityCategoryId",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string",
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.Shared.PagedResult`1[[FunnyActivities.Application.DTOs.ActivityManagement.ActivityDto, FunnyActivities.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.Shared.PagedResult`1[[FunnyActivities.Application.DTOs.ActivityManagement.ActivityDto, FunnyActivities.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.Shared.PagedResult`1[[FunnyActivities.Application.DTOs.ActivityManagement.ActivityDto, FunnyActivities.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Activity"
        ],
        "summary": " (Requires: CanCreateActivity)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.CreateActivityRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.CreateActivityRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.CreateActivityRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/activities/{id}": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": " (Requires: CanViewActivity)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "put": {
        "tags": [
          "Activity"
        ],
        "summary": " (Requires: CanUpdateActivity)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.UpdateActivityRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.UpdateActivityRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.UpdateActivityRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Activity"
        ],
        "summary": " (Requires: CanDeleteActivity)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/activities/{id}/with-details": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": " (Requires: CanViewActivity)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityWithDetailsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityWithDetailsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityWithDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/activities/{activityId}/upload-video": {
      "post": {
        "tags": [
          "Activity"
        ],
        "summary": " (Requires: CanUpdateActivity)",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.UploadActivityVideoRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.UploadActivityVideoRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.UploadActivityVideoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.UploadActivityVideoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.UploadActivityVideoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.UploadActivityVideoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/activities/{activityId}/video-url": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": " (Requires: CanViewActivity)",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "videoObjectKey",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expirySeconds",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 3600
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": { }
              },
              "application/json": {
                "schema": { }
              },
              "text/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/activities/{activityId}/video": {
      "delete": {
        "tags": [
          "Activity"
        ],
        "summary": " (Requires: CanUpdateActivity)",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "videoObjectKey",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/activity-categories": {
      "get": {
        "tags": [
          "ActivityCategory"
        ],
        "summary": " (Requires: CanViewActivityCategory)",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string",
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.Shared.PagedResult`1[[FunnyActivities.Application.DTOs.ActivityManagement.ActivityCategoryDto, FunnyActivities.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.Shared.PagedResult`1[[FunnyActivities.Application.DTOs.ActivityManagement.ActivityCategoryDto, FunnyActivities.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.Shared.PagedResult`1[[FunnyActivities.Application.DTOs.ActivityManagement.ActivityCategoryDto, FunnyActivities.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "ActivityCategory"
        ],
        "summary": " (Requires: CanCreateActivityCategory)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.CreateActivityCategoryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.CreateActivityCategoryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.CreateActivityCategoryRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityCategoryDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityCategoryDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityCategoryDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/activity-categories/{id}": {
      "get": {
        "tags": [
          "ActivityCategory"
        ],
        "summary": " (Requires: CanViewActivityCategory)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityCategoryDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityCategoryDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityCategoryDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "put": {
        "tags": [
          "ActivityCategory"
        ],
        "summary": " (Requires: CanUpdateActivityCategory)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.UpdateActivityCategoryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.UpdateActivityCategoryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.UpdateActivityCategoryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityCategoryDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityCategoryDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityCategoryDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "ActivityCategory"
        ],
        "summary": " (Requires: CanDeleteActivityCategory)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/activity-product-variants/{id}": {
      "get": {
        "tags": [
          "ActivityProductVariant"
        ],
        "summary": " (Requires: CanViewActivityProductVariant)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityProductVariantDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityProductVariantDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityProductVariantDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "put": {
        "tags": [
          "ActivityProductVariant"
        ],
        "summary": " (Requires: CanUpdateActivityProductVariant)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.UpdateActivityProductVariantRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.UpdateActivityProductVariantRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.UpdateActivityProductVariantRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityProductVariantDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityProductVariantDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityProductVariantDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "ActivityProductVariant"
        ],
        "summary": " (Requires: CanDeleteActivityProductVariant)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/activity-product-variants/by-activity/{activityId}": {
      "get": {
        "tags": [
          "ActivityProductVariant"
        ],
        "summary": " (Requires: CanViewActivityProductVariant)",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityProductVariantDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityProductVariantDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityProductVariantDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/activity-product-variants": {
      "post": {
        "tags": [
          "ActivityProductVariant"
        ],
        "summary": " (Requires: CanCreateActivityProductVariant)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.CreateActivityProductVariantRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.CreateActivityProductVariantRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.CreateActivityProductVariantRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityProductVariantDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityProductVariantDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityProductVariantDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UserManagement.RegisterUserRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UserManagement.RegisterUserRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UserManagement.RegisterUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/auth/test": {
      "get": {
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UserManagement.LoginRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UserManagement.LoginRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UserManagement.LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.WebAPI.Controllers.RefreshTokenRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.WebAPI.Controllers.RefreshTokenRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.WebAPI.Controllers.RefreshTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": " (Requires Authentication)",
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/base-products": {
      "post": {
        "tags": [
          "BaseProduct"
        ],
        "summary": " (Requires: CanCreateBaseProduct)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.CreateBaseProductRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.CreateBaseProductRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.CreateBaseProductRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "get": {
        "tags": [
          "BaseProduct"
        ],
        "summary": " (Requires: CanViewBaseProduct)",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/base-products/{id}": {
      "get": {
        "tags": [
          "BaseProduct"
        ],
        "summary": " (Requires: CanViewBaseProduct)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "put": {
        "tags": [
          "BaseProduct"
        ],
        "summary": " (Requires: CanUpdateBaseProduct)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.UpdateBaseProductRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.UpdateBaseProductRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.UpdateBaseProductRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "BaseProduct"
        ],
        "summary": " (Requires: CanDeleteBaseProduct)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/categories": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": " (Requires: CanViewCategory)",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string",
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.Shared.PagedResult`1[[FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto, FunnyActivities.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.Shared.PagedResult`1[[FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto, FunnyActivities.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.Shared.PagedResult`1[[FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto, FunnyActivities.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Category"
        ],
        "summary": " (Requires: CanCreateCategory)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.CategoryManagement.CreateCategoryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.CategoryManagement.CreateCategoryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.CategoryManagement.CreateCategoryRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/categories/{id}": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": " (Requires: CanViewCategory)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "put": {
        "tags": [
          "Category"
        ],
        "summary": " (Requires: CanUpdateCategory)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.CategoryManagement.UpdateCategoryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.CategoryManagement.UpdateCategoryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.CategoryManagement.UpdateCategoryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Category"
        ],
        "summary": " (Requires: CanDeleteCategory)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/categories/{id}/with-products": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": " (Requires: CanViewCategory)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.CategoryManagement.CategoryWithProductsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.CategoryManagement.CategoryWithProductsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.CategoryManagement.CategoryWithProductsDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/categories/search": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": " (Requires: CanViewCategory)",
        "parameters": [
          {
            "name": "searchTerm",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.Shared.PagedResult`1[[FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto, FunnyActivities.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.Shared.PagedResult`1[[FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto, FunnyActivities.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.Shared.PagedResult`1[[FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto, FunnyActivities.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": " (Requires: CanViewBaseProduct)",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string",
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.Shared.PagedResult`1[[FunnyActivities.Application.DTOs.ProductsManagement.ProductListDto, FunnyActivities.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.Shared.PagedResult`1[[FunnyActivities.Application.DTOs.ProductsManagement.ProductListDto, FunnyActivities.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.Shared.PagedResult`1[[FunnyActivities.Application.DTOs.ProductsManagement.ProductListDto, FunnyActivities.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/products/{id}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": " (Requires: CanViewBaseProduct)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductsManagement.ProductListDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductsManagement.ProductListDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductsManagement.ProductListDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/products/base": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": " (Requires: CanCreateBaseProduct)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductsManagement.CreateBaseProductRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductsManagement.CreateBaseProductRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductsManagement.CreateBaseProductRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/products/base/{id}": {
      "put": {
        "tags": [
          "Products"
        ],
        "summary": " (Requires: CanUpdateBaseProduct)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductsManagement.UpdateBaseProductRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductsManagement.UpdateBaseProductRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductsManagement.UpdateBaseProductRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": " (Requires: CanDeleteBaseProduct)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cascadeDeleteVariants",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/products/{baseProductId}/variants": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": " (Requires: CanViewProductVariant)",
        "parameters": [
          {
            "name": "baseProductId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.Shared.PagedResult`1[[FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto, FunnyActivities.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.Shared.PagedResult`1[[FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto, FunnyActivities.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.Shared.PagedResult`1[[FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto, FunnyActivities.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/products/variants": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": " (Requires: CanCreateProductVariant)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.CreateProductVariantRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.CreateProductVariantRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.CreateProductVariantRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/products/variants/{id}": {
      "put": {
        "tags": [
          "Products"
        ],
        "summary": " (Requires: CanUpdateProductVariant)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.UpdateProductVariantRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.UpdateProductVariantRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.UpdateProductVariantRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": " (Requires: CanDeleteProductVariant)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/products/variants/bulk": {
      "put": {
        "tags": [
          "Products"
        ],
        "summary": " (Requires: CanUpdateProductVariant)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductsManagement.BulkUpdateProductVariantsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductsManagement.BulkUpdateProductVariantsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductsManagement.BulkUpdateProductVariantsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.Commands.ProductVariantManagement.BulkUpdateProductVariantsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.Commands.ProductVariantManagement.BulkUpdateProductVariantsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.Commands.ProductVariantManagement.BulkUpdateProductVariantsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/product-variants": {
      "post": {
        "tags": [
          "ProductVariant"
        ],
        "summary": " (Requires: CanCreateProductVariant)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.CreateProductVariantRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.CreateProductVariantRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.CreateProductVariantRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "get": {
        "tags": [
          "ProductVariant"
        ],
        "summary": " (Requires: CanViewProductVariant)",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "baseProductId",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unitOfMeasureId",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/product-variants/{id}": {
      "get": {
        "tags": [
          "ProductVariant"
        ],
        "summary": " (Requires: CanViewProductVariant)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "put": {
        "tags": [
          "ProductVariant"
        ],
        "summary": " (Requires: CanUpdateProductVariant)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.UpdateProductVariantRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.UpdateProductVariantRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.UpdateProductVariantRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "ProductVariant"
        ],
        "summary": " (Requires: CanDeleteProductVariant)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/roles/assign": {
      "post": {
        "tags": [
          "RoleManagement"
        ],
        "summary": " (Requires: CanManageUsers)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.WebAPI.Controllers.AssignRoleRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.WebAPI.Controllers.AssignRoleRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.WebAPI.Controllers.AssignRoleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/roles/user/{userId}": {
      "get": {
        "tags": [
          "RoleManagement"
        ],
        "summary": " (Requires: CanManageUsers)",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/shopping-cart": {
      "post": {
        "tags": [
          "ShoppingCart"
        ],
        "summary": " (Requires Authentication)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ShoppingCartManagement.AddToCartRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ShoppingCartManagement.AddToCartRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ShoppingCartManagement.AddToCartRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ShoppingCartManagement.ShoppingCartItemDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ShoppingCartManagement.ShoppingCartItemDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ShoppingCartManagement.ShoppingCartItemDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "get": {
        "tags": [
          "ShoppingCart"
        ],
        "summary": " (Requires Authentication)",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ShoppingCartManagement.ShoppingCartItemDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ShoppingCartManagement.ShoppingCartItemDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ShoppingCartManagement.ShoppingCartItemDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/shopping-cart/{id}": {
      "put": {
        "tags": [
          "ShoppingCart"
        ],
        "summary": " (Requires Authentication)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ShoppingCartManagement.UpdateCartItemRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ShoppingCartManagement.UpdateCartItemRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ShoppingCartManagement.UpdateCartItemRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ShoppingCartManagement.ShoppingCartItemDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ShoppingCartManagement.ShoppingCartItemDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ShoppingCartManagement.ShoppingCartItemDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "ShoppingCart"
        ],
        "summary": " (Requires Authentication)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/steps/{id}": {
      "get": {
        "tags": [
          "Step"
        ],
        "summary": " (Requires: CanViewStep)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.StepDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.StepDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.StepDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "put": {
        "tags": [
          "Step"
        ],
        "summary": " (Requires: CanUpdateStep)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.UpdateStepRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.UpdateStepRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.UpdateStepRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.StepDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.StepDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.StepDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Step"
        ],
        "summary": " (Requires: CanDeleteStep)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/steps/by-activity/{activityId}": {
      "get": {
        "tags": [
          "Step"
        ],
        "summary": " (Requires: CanViewStep)",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.StepDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.StepDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.StepDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/steps": {
      "post": {
        "tags": [
          "Step"
        ],
        "summary": " (Requires: CanCreateStep)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.CreateStepRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.CreateStepRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.CreateStepRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.StepDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.StepDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.StepDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/units-of-measure": {
      "post": {
        "tags": [
          "UnitOfMeasure"
        ],
        "summary": " (Requires: CanCreateUnit)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UnitOfMeasureManagement.CreateUnitOfMeasureRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UnitOfMeasureManagement.CreateUnitOfMeasureRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UnitOfMeasureManagement.CreateUnitOfMeasureRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UnitOfMeasureDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UnitOfMeasureDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UnitOfMeasureDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "get": {
        "tags": [
          "UnitOfMeasure"
        ],
        "summary": " (Requires: CanViewUnit)",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UnitOfMeasureDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UnitOfMeasureDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UnitOfMeasureDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/units-of-measure/{id}": {
      "get": {
        "tags": [
          "UnitOfMeasure"
        ],
        "summary": " (Requires: CanViewUnit)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UnitOfMeasureDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UnitOfMeasureDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UnitOfMeasureDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "put": {
        "tags": [
          "UnitOfMeasure"
        ],
        "summary": " (Requires: CanUpdateUnit)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UpdateUnitOfMeasureRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UpdateUnitOfMeasureRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UpdateUnitOfMeasureRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UnitOfMeasureDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UnitOfMeasureDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UnitOfMeasureDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "UnitOfMeasure"
        ],
        "summary": " (Requires: CanDeleteUnit)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/users/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": " (Requires Authentication)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UserManagement.RegisterUserRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UserManagement.RegisterUserRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UserManagement.RegisterUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": " (Requires Authentication)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UserManagement.LoginRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UserManagement.LoginRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UserManagement.LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": " (Requires Authentication)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/users/profile": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": " (Requires Authentication)",
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": " (Requires Authentication)",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/users/request-password-reset": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": " (Requires Authentication)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.Shared.RequestPasswordResetRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.Shared.RequestPasswordResetRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.Shared.RequestPasswordResetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/users/reset-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": " (Requires Authentication)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UserManagement.ResetPasswordRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UserManagement.ResetPasswordRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.UserManagement.ResetPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/users/search": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": " (Requires: CanManageUsers)",
        "parameters": [
          {
            "name": "searchTerm",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string",
              "default": "CreatedAt"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string",
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/users/upload-profile-image": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": " (Requires Authentication)",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "ImageFile": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "ImageFile": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "FunnyActivities.Application.Commands.ProductVariantManagement.BulkUpdateError": {
        "type": "object",
        "properties": {
          "variantId": {
            "type": "string",
            "description": "Gets or sets the ID of the variant that failed to update.",
            "format": "uuid"
          },
          "errorMessage": {
            "type": "string",
            "description": "Gets or sets the error message.",
            "nullable": true
          },
          "errorType": {
            "type": "string",
            "description": "Gets or sets the error type.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Error details for failed bulk update operations."
      },
      "FunnyActivities.Application.Commands.ProductVariantManagement.BulkUpdateProductVariantsResponse": {
        "type": "object",
        "properties": {
          "updatedVariants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto"
            },
            "description": "Gets or sets the list of successfully updated variants.",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunnyActivities.Application.Commands.ProductVariantManagement.BulkUpdateError"
            },
            "description": "Gets or sets the list of failed updates with error details.",
            "nullable": true
          },
          "totalUpdates": {
            "type": "integer",
            "description": "Gets or sets the total number of updates attempted.",
            "format": "int32"
          },
          "successfulUpdates": {
            "type": "integer",
            "description": "Gets or sets the number of successful updates.",
            "format": "int32"
          },
          "failedUpdates": {
            "type": "integer",
            "description": "Gets or sets the number of failed updates.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Response model for bulk update operation."
      },
      "FunnyActivities.Application.DTOs.ActivityManagement.ActivityCategoryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the unique identifier of the activity category.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the category.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description of the category.",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "Gets or sets the date and time when the category was created.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Gets or sets the date and time when the category was last updated.",
            "format": "date-time"
          },
          "activityCount": {
            "type": "integer",
            "description": "Gets or sets the count of activities in this category.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Data transfer object for activity category information."
      },
      "FunnyActivities.Application.DTOs.ActivityManagement.ActivityDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the unique identifier of the activity.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the activity.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description of the activity.",
            "nullable": true
          },
          "videoUrl": {
            "type": "string",
            "description": "Gets or sets the video URL of the activity.",
            "nullable": true
          },
          "duration": {
            "type": "string",
            "description": "Gets or sets the duration of the activity in HH:MM:SS format.",
            "nullable": true
          },
          "activityCategoryId": {
            "type": "string",
            "description": "Gets or sets the activity category ID.",
            "format": "uuid"
          },
          "activityCategoryName": {
            "type": "string",
            "description": "Gets or sets the activity category name.",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "Gets or sets the date and time when the activity was created.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Gets or sets the date and time when the activity was last updated.",
            "format": "date-time"
          },
          "stepCount": {
            "type": "integer",
            "description": "Gets or sets the count of steps in the activity.",
            "format": "int32"
          },
          "productVariantCount": {
            "type": "integer",
            "description": "Gets or sets the count of product variants in the activity.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Data transfer object for activity information."
      },
      "FunnyActivities.Application.DTOs.ActivityManagement.ActivityProductVariantDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the unique identifier of the activity product variant.",
            "format": "uuid"
          },
          "activityId": {
            "type": "string",
            "description": "Gets or sets the activity ID.",
            "format": "uuid"
          },
          "activityName": {
            "type": "string",
            "description": "Gets or sets the activity name.",
            "nullable": true
          },
          "productVariantId": {
            "type": "string",
            "description": "Gets or sets the product variant ID.",
            "format": "uuid"
          },
          "productVariantName": {
            "type": "string",
            "description": "Gets or sets the product variant name.",
            "nullable": true
          },
          "baseProductName": {
            "type": "string",
            "description": "Gets or sets the base product name.",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "description": "Gets or sets the quantity required for the activity.",
            "format": "double"
          },
          "unitOfMeasureId": {
            "type": "string",
            "description": "Gets or sets the unit of measure ID.",
            "format": "uuid"
          },
          "unitOfMeasureName": {
            "type": "string",
            "description": "Gets or sets the unit of measure name.",
            "nullable": true
          },
          "unitSymbol": {
            "type": "string",
            "description": "Gets or sets the unit symbol.",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "Gets or sets the date and time when the association was created.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Gets or sets the date and time when the association was last updated.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Data transfer object for activity product variant information."
      },
      "FunnyActivities.Application.DTOs.ActivityManagement.ActivityWithDetailsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the unique identifier of the activity.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the activity.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description of the activity.",
            "nullable": true
          },
          "videoUrl": {
            "type": "string",
            "description": "Gets or sets the video URL of the activity.",
            "nullable": true
          },
          "duration": {
            "type": "string",
            "description": "Gets or sets the duration of the activity in HH:MM:SS format.",
            "nullable": true
          },
          "activityCategoryId": {
            "type": "string",
            "description": "Gets or sets the activity category ID.",
            "format": "uuid"
          },
          "activityCategoryName": {
            "type": "string",
            "description": "Gets or sets the activity category name.",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "Gets or sets the date and time when the activity was created.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Gets or sets the date and time when the activity was last updated.",
            "format": "date-time"
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.StepDto"
            },
            "description": "Gets or sets the list of steps in the activity.",
            "nullable": true
          },
          "activityProductVariants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityProductVariantDto"
            },
            "description": "Gets or sets the list of activity product variants.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data transfer object for activity with full details including steps and product variants."
      },
      "FunnyActivities.Application.DTOs.ActivityManagement.CreateActivityCategoryRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the name of the category."
          },
          "description": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets the description of the category.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request model for creating a new activity category."
      },
      "FunnyActivities.Application.DTOs.ActivityManagement.CreateActivityProductVariantRequest": {
        "required": [
          "activityId",
          "productVariantId",
          "quantity",
          "unitOfMeasureId"
        ],
        "type": "object",
        "properties": {
          "activityId": {
            "type": "string",
            "description": "Gets or sets the activity ID.",
            "format": "uuid"
          },
          "productVariantId": {
            "type": "string",
            "description": "Gets or sets the product variant ID.",
            "format": "uuid"
          },
          "quantity": {
            "minimum": 0.01,
            "type": "number",
            "description": "Gets or sets the quantity required for the activity.",
            "format": "double"
          },
          "unitOfMeasureId": {
            "type": "string",
            "description": "Gets or sets the unit of measure ID.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request model for creating a new activity product variant."
      },
      "FunnyActivities.Application.DTOs.ActivityManagement.CreateActivityRequest": {
        "required": [
          "activityCategoryId",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the name of the activity."
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets the description of the activity.",
            "nullable": true
          },
          "videoUrl": {
            "type": "string",
            "description": "Gets or sets the video URL of the activity.",
            "nullable": true
          },
          "durationHours": {
            "maximum": 23,
            "minimum": 0,
            "type": "integer",
            "description": "Gets or sets the duration of the activity in hours.",
            "format": "int32",
            "nullable": true
          },
          "durationMinutes": {
            "maximum": 59,
            "minimum": 0,
            "type": "integer",
            "description": "Gets or sets the duration of the activity in minutes.",
            "format": "int32",
            "nullable": true
          },
          "durationSeconds": {
            "maximum": 59,
            "minimum": 0,
            "type": "integer",
            "description": "Gets or sets the duration of the activity in seconds.",
            "format": "int32",
            "nullable": true
          },
          "activityCategoryId": {
            "type": "string",
            "description": "Gets or sets the activity category ID.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request model for creating a new activity."
      },
      "FunnyActivities.Application.DTOs.ActivityManagement.CreateStepRequest": {
        "required": [
          "activityId",
          "description",
          "order"
        ],
        "type": "object",
        "properties": {
          "activityId": {
            "type": "string",
            "description": "Gets or sets the activity ID.",
            "format": "uuid"
          },
          "order": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the order of the step in the activity.",
            "format": "int32"
          },
          "description": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the description of the step."
          }
        },
        "additionalProperties": false,
        "description": "Request model for creating a new step."
      },
      "FunnyActivities.Application.DTOs.ActivityManagement.StepDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the unique identifier of the step.",
            "format": "uuid"
          },
          "activityId": {
            "type": "string",
            "description": "Gets or sets the activity ID.",
            "format": "uuid"
          },
          "activityName": {
            "type": "string",
            "description": "Gets or sets the activity name.",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "description": "Gets or sets the order of the step in the activity.",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description of the step.",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "Gets or sets the date and time when the step was created.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Gets or sets the date and time when the step was last updated.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Data transfer object for step information."
      },
      "FunnyActivities.Application.DTOs.ActivityManagement.UpdateActivityCategoryRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the name of the category."
          },
          "description": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets the description of the category.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request model for updating an existing activity category."
      },
      "FunnyActivities.Application.DTOs.ActivityManagement.UpdateActivityProductVariantRequest": {
        "required": [
          "quantity",
          "unitOfMeasureId"
        ],
        "type": "object",
        "properties": {
          "quantity": {
            "minimum": 0.01,
            "type": "number",
            "description": "Gets or sets the quantity required for the activity.",
            "format": "double"
          },
          "unitOfMeasureId": {
            "type": "string",
            "description": "Gets or sets the unit of measure ID.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request model for updating an existing activity product variant."
      },
      "FunnyActivities.Application.DTOs.ActivityManagement.UpdateActivityRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the name of the activity."
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets the description of the activity.",
            "nullable": true
          },
          "videoUrl": {
            "type": "string",
            "description": "Gets or sets the video URL of the activity.",
            "nullable": true
          },
          "durationHours": {
            "maximum": 23,
            "minimum": 0,
            "type": "integer",
            "description": "Gets or sets the duration of the activity in hours.",
            "format": "int32",
            "nullable": true
          },
          "durationMinutes": {
            "maximum": 59,
            "minimum": 0,
            "type": "integer",
            "description": "Gets or sets the duration of the activity in minutes.",
            "format": "int32",
            "nullable": true
          },
          "durationSeconds": {
            "maximum": 59,
            "minimum": 0,
            "type": "integer",
            "description": "Gets or sets the duration of the activity in seconds.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request model for updating an existing activity."
      },
      "FunnyActivities.Application.DTOs.ActivityManagement.UpdateStepRequest": {
        "required": [
          "description",
          "order"
        ],
        "type": "object",
        "properties": {
          "order": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the order of the step in the activity.",
            "format": "int32"
          },
          "description": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the description of the step."
          }
        },
        "additionalProperties": false,
        "description": "Request model for updating an existing step."
      },
      "FunnyActivities.Application.DTOs.ActivityManagement.UploadActivityVideoRequest": {
        "required": [
          "activityId",
          "contentType",
          "fileName",
          "videoData"
        ],
        "type": "object",
        "properties": {
          "activityId": {
            "type": "string",
            "description": "Gets or sets the activity ID.",
            "format": "uuid"
          },
          "videoData": {
            "type": "string",
            "description": "Gets or sets the video file data.",
            "format": "byte"
          },
          "fileName": {
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the video file name."
          },
          "contentType": {
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the video content type."
          }
        },
        "additionalProperties": false,
        "description": "Request model for uploading a video for an activity."
      },
      "FunnyActivities.Application.DTOs.ActivityManagement.UploadActivityVideoResponse": {
        "type": "object",
        "properties": {
          "activityId": {
            "type": "string",
            "description": "Gets or sets the activity ID.",
            "format": "uuid"
          },
          "videoObjectKey": {
            "type": "string",
            "description": "Gets or sets the video object key in storage.",
            "nullable": true
          },
          "signedVideoUrl": {
            "type": "string",
            "description": "Gets or sets the signed URL for accessing the video.",
            "nullable": true
          },
          "urlExpirySeconds": {
            "type": "integer",
            "description": "Gets or sets the expiry time of the signed URL in seconds.",
            "format": "int32"
          },
          "uploadedAt": {
            "type": "string",
            "description": "Gets or sets the upload timestamp.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Response model for video upload operation."
      },
      "FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the unique identifier of the base product.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the base product.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description of the base product.",
            "nullable": true
          },
          "categoryId": {
            "type": "string",
            "description": "Gets or sets the category ID of the base product.",
            "format": "uuid",
            "nullable": true
          },
          "categoryName": {
            "type": "string",
            "description": "Gets or sets the category name of the base product.",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "Gets or sets the date and time when the base product was created.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Gets or sets the date and time when the base product was last updated.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Data transfer object for base product information."
      },
      "FunnyActivities.Application.DTOs.BaseProductManagement.CreateBaseProductRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the base product.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description of the base product.",
            "nullable": true
          },
          "categoryId": {
            "type": "string",
            "description": "Gets or sets the category ID of the base product.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request DTO for creating a new base product."
      },
      "FunnyActivities.Application.DTOs.BaseProductManagement.UpdateBaseProductRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the base product.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description of the base product.",
            "nullable": true
          },
          "categoryId": {
            "type": "string",
            "description": "Gets or sets the category ID of the base product.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request DTO for updating an existing base product."
      },
      "FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the unique identifier of the category.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the category.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description of the category.",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "Gets or sets the date and time when the category was created.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Gets or sets the date and time when the category was last updated.",
            "format": "date-time"
          },
          "productCount": {
            "type": "integer",
            "description": "Gets or sets the count of products in this category.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Data transfer object for category information."
      },
      "FunnyActivities.Application.DTOs.CategoryManagement.CategoryWithProductsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the unique identifier of the category.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the category.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description of the category.",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "Gets or sets the date and time when the category was created.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Gets or sets the date and time when the category was last updated.",
            "format": "date-time"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto"
            },
            "description": "Gets or sets the list of products in this category.",
            "nullable": true
          },
          "totalProducts": {
            "type": "integer",
            "description": "Gets or sets the total count of products in this category.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Data transfer object for category information including related products."
      },
      "FunnyActivities.Application.DTOs.CategoryManagement.CreateCategoryRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the name of the category."
          },
          "description": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets the description of the category.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request model for creating a new category."
      },
      "FunnyActivities.Application.DTOs.CategoryManagement.UpdateCategoryRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the name of the category."
          },
          "description": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets the description of the category.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request model for updating an existing category."
      },
      "FunnyActivities.Application.DTOs.ProductVariantManagement.CreateProductVariantRequest": {
        "type": "object",
        "properties": {
          "baseProductId": {
            "type": "string",
            "description": "Gets or sets the base product ID.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the variant.",
            "nullable": true
          },
          "stockQuantity": {
            "type": "number",
            "description": "Gets or sets the initial stock quantity.",
            "format": "double"
          },
          "unitOfMeasureId": {
            "type": "string",
            "description": "Gets or sets the unit of measure ID.",
            "format": "uuid"
          },
          "unitValue": {
            "type": "number",
            "description": "Gets or sets the unit value.",
            "format": "double"
          },
          "usageNotes": {
            "type": "string",
            "description": "Gets or sets the usage notes.",
            "nullable": true
          },
          "photoFiles": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            },
            "description": "Gets or sets the list of photo files to upload.",
            "nullable": true
          },
          "dynamicProperties": {
            "type": "object",
            "additionalProperties": { },
            "description": "Gets or sets the dynamic properties.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request DTO for creating a new product variant."
      },
      "FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the unique identifier of the product variant.",
            "format": "uuid"
          },
          "baseProductId": {
            "type": "string",
            "description": "Gets or sets the base product ID.",
            "format": "uuid"
          },
          "baseProductName": {
            "type": "string",
            "description": "Gets or sets the base product name.",
            "nullable": true
          },
          "baseProductDescription": {
            "type": "string",
            "description": "Gets or sets the base product description.",
            "nullable": true
          },
          "baseProductCategoryId": {
            "type": "string",
            "description": "Gets or sets the base product category ID.",
            "format": "uuid",
            "nullable": true
          },
          "baseProductCategoryName": {
            "type": "string",
            "description": "Gets or sets the base product category name.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the variant.",
            "nullable": true
          },
          "stockQuantity": {
            "type": "number",
            "description": "Gets or sets the current stock quantity of the variant.",
            "format": "double"
          },
          "unitOfMeasureId": {
            "type": "string",
            "description": "Gets or sets the unit of measure ID.",
            "format": "uuid"
          },
          "unitOfMeasureName": {
            "type": "string",
            "description": "Gets or sets the unit of measure name.",
            "nullable": true
          },
          "unitSymbol": {
            "type": "string",
            "description": "Gets or sets the unit symbol.",
            "nullable": true
          },
          "unitValue": {
            "type": "number",
            "description": "Gets or sets the unit value of the variant.",
            "format": "double"
          },
          "usageNotes": {
            "type": "string",
            "description": "Gets or sets the usage notes for the variant.",
            "nullable": true
          },
          "photos": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of photo URLs for the variant.",
            "nullable": true
          },
          "dynamicProperties": {
            "type": "object",
            "additionalProperties": { },
            "description": "Gets or sets the dynamic properties for the variant.",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "Gets or sets the date and time when the variant was created.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Gets or sets the date and time when the variant was last updated.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Data transfer object for product variant information."
      },
      "FunnyActivities.Application.DTOs.ProductVariantManagement.UpdateProductVariantRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the variant.",
            "nullable": true
          },
          "stockQuantity": {
            "type": "number",
            "description": "Gets or sets the stock quantity.",
            "format": "double",
            "nullable": true
          },
          "unitOfMeasureId": {
            "type": "string",
            "description": "Gets or sets the unit of measure ID.",
            "format": "uuid",
            "nullable": true
          },
          "unitValue": {
            "type": "number",
            "description": "Gets or sets the unit value.",
            "format": "double",
            "nullable": true
          },
          "usageNotes": {
            "type": "string",
            "description": "Gets or sets the usage notes.",
            "nullable": true
          },
          "photoFiles": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            },
            "description": "Gets or sets the list of photo files to upload.",
            "nullable": true
          },
          "dynamicProperties": {
            "type": "object",
            "additionalProperties": { },
            "description": "Gets or sets the dynamic properties.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request DTO for updating an existing product variant."
      },
      "FunnyActivities.Application.DTOs.ProductsManagement.BulkUpdateProductVariantsRequest": {
        "required": [
          "updates"
        ],
        "type": "object",
        "properties": {
          "updates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductsManagement.ProductVariantUpdateRequest"
            },
            "description": "Gets or sets the list of product variant updates."
          }
        },
        "additionalProperties": false,
        "description": "Request DTO for bulk updating product variants."
      },
      "FunnyActivities.Application.DTOs.ProductsManagement.CreateBaseProductRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the name of the base product."
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets the description of the base product.",
            "nullable": true
          },
          "categoryId": {
            "type": "string",
            "description": "Gets or sets the category ID of the base product.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request DTO for creating a new base product."
      },
      "FunnyActivities.Application.DTOs.ProductsManagement.ProductListDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the unique identifier of the product.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the product.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description of the product.",
            "nullable": true
          },
          "categoryId": {
            "type": "string",
            "description": "Gets or sets the category ID of the product.",
            "format": "uuid",
            "nullable": true
          },
          "categoryName": {
            "type": "string",
            "description": "Gets or sets the category name of the product.",
            "nullable": true
          },
          "basePrice": {
            "type": "number",
            "description": "Gets or sets the base price of the product.",
            "format": "double",
            "nullable": true
          },
          "stockStatus": {
            "type": "string",
            "description": "Gets or sets the stock status of the product.",
            "nullable": true
          },
          "totalVariants": {
            "type": "integer",
            "description": "Gets or sets the total number of variants for this product.",
            "format": "int32"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto"
            },
            "description": "Gets or sets the list of product variants.",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "Gets or sets the creation date and time.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Gets or sets the last update date and time.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Data transfer object for product list information including variants."
      },
      "FunnyActivities.Application.DTOs.ProductsManagement.ProductVariantUpdateRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the unique identifier of the product variant.",
            "format": "uuid"
          },
          "name": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets the name of the product variant.",
            "nullable": true
          },
          "stockQuantity": {
            "minimum": 0,
            "type": "number",
            "description": "Gets or sets the stock quantity of the product variant.",
            "format": "double",
            "nullable": true
          },
          "unitOfMeasureId": {
            "type": "string",
            "description": "Gets or sets the unit of measure ID.",
            "format": "uuid",
            "nullable": true
          },
          "unitValue": {
            "minimum": 0.01,
            "type": "number",
            "description": "Gets or sets the unit value.",
            "format": "double",
            "nullable": true
          },
          "usageNotes": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets the usage notes.",
            "nullable": true
          },
          "dynamicProperties": {
            "type": "object",
            "additionalProperties": { },
            "description": "Gets or sets the dynamic properties.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request DTO for updating a single product variant in bulk operations."
      },
      "FunnyActivities.Application.DTOs.ProductsManagement.UpdateBaseProductRequest": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the name of the base product.",
            "nullable": true
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets the description of the base product.",
            "nullable": true
          },
          "categoryId": {
            "type": "string",
            "description": "Gets or sets the category ID of the base product.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request DTO for updating an existing base product."
      },
      "FunnyActivities.Application.DTOs.Shared.PagedResult`1[[FunnyActivities.Application.DTOs.ActivityManagement.ActivityCategoryDto, FunnyActivities.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityCategoryDto"
            },
            "description": "Gets or sets the items in the current page.\r\nCollection of items for the requested page.",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Gets or sets the current page number (1-based).\r\nThe page number being displayed, starting from 1.",
            "format": "int32",
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Gets or sets the number of items per page.\r\nMaximum number of items returned in a single page.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Gets or sets the total number of items across all pages.\r\nTotal count of items available in the complete dataset.",
            "format": "int32",
            "example": 25
          },
          "totalPages": {
            "type": "integer",
            "description": "Gets the total number of pages.\r\nCalculated based on total count and page size.",
            "format": "int32",
            "readOnly": true,
            "example": 3
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Gets a value indicating whether there is a previous page.\r\nTrue if current page is greater than 1.",
            "readOnly": true,
            "example": false
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Gets a value indicating whether there is a next page.\r\nTrue if current page is less than total pages.",
            "readOnly": true,
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a paged result with items and pagination metadata.\r\nProvides efficient navigation through large datasets by breaking them into manageable pages."
      },
      "FunnyActivities.Application.DTOs.Shared.PagedResult`1[[FunnyActivities.Application.DTOs.ActivityManagement.ActivityDto, FunnyActivities.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ActivityManagement.ActivityDto"
            },
            "description": "Gets or sets the items in the current page.\r\nCollection of items for the requested page.",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Gets or sets the current page number (1-based).\r\nThe page number being displayed, starting from 1.",
            "format": "int32",
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Gets or sets the number of items per page.\r\nMaximum number of items returned in a single page.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Gets or sets the total number of items across all pages.\r\nTotal count of items available in the complete dataset.",
            "format": "int32",
            "example": 25
          },
          "totalPages": {
            "type": "integer",
            "description": "Gets the total number of pages.\r\nCalculated based on total count and page size.",
            "format": "int32",
            "readOnly": true,
            "example": 3
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Gets a value indicating whether there is a previous page.\r\nTrue if current page is greater than 1.",
            "readOnly": true,
            "example": false
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Gets a value indicating whether there is a next page.\r\nTrue if current page is less than total pages.",
            "readOnly": true,
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a paged result with items and pagination metadata.\r\nProvides efficient navigation through large datasets by breaking them into manageable pages."
      },
      "FunnyActivities.Application.DTOs.Shared.PagedResult`1[[FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto, FunnyActivities.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto"
            },
            "description": "Gets or sets the items in the current page.\r\nCollection of items for the requested page.",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Gets or sets the current page number (1-based).\r\nThe page number being displayed, starting from 1.",
            "format": "int32",
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Gets or sets the number of items per page.\r\nMaximum number of items returned in a single page.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Gets or sets the total number of items across all pages.\r\nTotal count of items available in the complete dataset.",
            "format": "int32",
            "example": 25
          },
          "totalPages": {
            "type": "integer",
            "description": "Gets the total number of pages.\r\nCalculated based on total count and page size.",
            "format": "int32",
            "readOnly": true,
            "example": 3
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Gets a value indicating whether there is a previous page.\r\nTrue if current page is greater than 1.",
            "readOnly": true,
            "example": false
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Gets a value indicating whether there is a next page.\r\nTrue if current page is less than total pages.",
            "readOnly": true,
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a paged result with items and pagination metadata.\r\nProvides efficient navigation through large datasets by breaking them into manageable pages."
      },
      "FunnyActivities.Application.DTOs.Shared.PagedResult`1[[FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto, FunnyActivities.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto"
            },
            "description": "Gets or sets the items in the current page.\r\nCollection of items for the requested page.",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Gets or sets the current page number (1-based).\r\nThe page number being displayed, starting from 1.",
            "format": "int32",
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Gets or sets the number of items per page.\r\nMaximum number of items returned in a single page.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Gets or sets the total number of items across all pages.\r\nTotal count of items available in the complete dataset.",
            "format": "int32",
            "example": 25
          },
          "totalPages": {
            "type": "integer",
            "description": "Gets the total number of pages.\r\nCalculated based on total count and page size.",
            "format": "int32",
            "readOnly": true,
            "example": 3
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Gets a value indicating whether there is a previous page.\r\nTrue if current page is greater than 1.",
            "readOnly": true,
            "example": false
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Gets a value indicating whether there is a next page.\r\nTrue if current page is less than total pages.",
            "readOnly": true,
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a paged result with items and pagination metadata.\r\nProvides efficient navigation through large datasets by breaking them into manageable pages."
      },
      "FunnyActivities.Application.DTOs.Shared.PagedResult`1[[FunnyActivities.Application.DTOs.ProductsManagement.ProductListDto, FunnyActivities.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunnyActivities.Application.DTOs.ProductsManagement.ProductListDto"
            },
            "description": "Gets or sets the items in the current page.\r\nCollection of items for the requested page.",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Gets or sets the current page number (1-based).\r\nThe page number being displayed, starting from 1.",
            "format": "int32",
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Gets or sets the number of items per page.\r\nMaximum number of items returned in a single page.",
            "format": "int32",
            "example": 10
          },
          "totalCount": {
            "type": "integer",
            "description": "Gets or sets the total number of items across all pages.\r\nTotal count of items available in the complete dataset.",
            "format": "int32",
            "example": 25
          },
          "totalPages": {
            "type": "integer",
            "description": "Gets the total number of pages.\r\nCalculated based on total count and page size.",
            "format": "int32",
            "readOnly": true,
            "example": 3
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Gets a value indicating whether there is a previous page.\r\nTrue if current page is greater than 1.",
            "readOnly": true,
            "example": false
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Gets a value indicating whether there is a next page.\r\nTrue if current page is less than total pages.",
            "readOnly": true,
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a paged result with items and pagination metadata.\r\nProvides efficient navigation through large datasets by breaking them into manageable pages."
      },
      "FunnyActivities.Application.DTOs.Shared.RequestPasswordResetRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FunnyActivities.Application.DTOs.ShoppingCartManagement.AddToCartRequest": {
        "type": "object",
        "properties": {
          "productVariantId": {
            "type": "string",
            "description": "Gets or sets the product variant ID.",
            "format": "uuid"
          },
          "quantity": {
            "type": "number",
            "description": "Gets or sets the quantity to add.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Request DTO for adding an item to the shopping cart."
      },
      "FunnyActivities.Application.DTOs.ShoppingCartManagement.ShoppingCartItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the unique identifier of the cart item.",
            "format": "uuid"
          },
          "productVariantId": {
            "type": "string",
            "description": "Gets or sets the product variant ID.",
            "format": "uuid"
          },
          "productVariantName": {
            "type": "string",
            "description": "Gets or sets the product variant name.",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "Gets or sets the user ID.",
            "format": "uuid"
          },
          "quantity": {
            "type": "number",
            "description": "Gets or sets the quantity of the item in the cart.",
            "format": "double"
          },
          "addedAt": {
            "type": "string",
            "description": "Gets or sets the date and time when the item was added to the cart.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Data transfer object for shopping cart item information."
      },
      "FunnyActivities.Application.DTOs.ShoppingCartManagement.UpdateCartItemRequest": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number",
            "description": "Gets or sets the new quantity.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Request DTO for updating a cart item quantity."
      },
      "FunnyActivities.Application.DTOs.UnitOfMeasureManagement.CreateUnitOfMeasureRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the unit.",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "description": "Gets or sets the symbol of the unit.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Gets or sets the type of the unit.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request DTO for creating a new unit of measure."
      },
      "FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UnitOfMeasureDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the unique identifier of the unit of measure.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the unit.",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "description": "Gets or sets the symbol of the unit.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Gets or sets the type of the unit.",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "Gets or sets the date and time when the unit was created.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Gets or sets the date and time when the unit was last updated.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Data transfer object for unit of measure information."
      },
      "FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UpdateUnitOfMeasureRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the unit.",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "description": "Gets or sets the symbol of the unit.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Gets or sets the type of the unit.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request DTO for updating a unit of measure."
      },
      "FunnyActivities.Application.DTOs.UserManagement.LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FunnyActivities.Application.DTOs.UserManagement.RegisterUserRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "$ref": "#/components/schemas/FunnyActivities.Domain.Entities.UserRole"
          }
        },
        "additionalProperties": false
      },
      "FunnyActivities.Application.DTOs.UserManagement.ResetPasswordRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FunnyActivities.Domain.Entities.UserRole": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "FunnyActivities.WebAPI.Controllers.AssignRoleRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "role": {
            "$ref": "#/components/schemas/FunnyActivities.Domain.Entities.UserRole"
          }
        },
        "additionalProperties": false
      },
      "FunnyActivities.WebAPI.Controllers.RefreshTokenRequest": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "nullable": true
          },
          "accessToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.Mvc.ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "Please enter JWT with Bearer into field. Example: Bearer {token}",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}