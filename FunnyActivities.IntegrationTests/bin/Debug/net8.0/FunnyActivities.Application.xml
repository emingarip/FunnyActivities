<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FunnyActivities.Application</name>
    </assembly>
    <members>
        <member name="T:FunnyActivities.Application.Behaviors.AuthorizationBehavior`2">
            <summary>
            MediatR pipeline behavior that performs authorization checks for commands and queries.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
        </member>
        <member name="M:FunnyActivities.Application.Behaviors.AuthorizationBehavior`2.#ctor(Microsoft.AspNetCore.Authorization.IAuthorizationService,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Behaviors.AuthorizationBehavior`2"/> class.
            </summary>
            <param name="authorizationService">The authorization service for policy evaluation.</param>
            <param name="httpContextAccessor">The HTTP context accessor for accessing the current user context.</param>
        </member>
        <member name="M:FunnyActivities.Application.Behaviors.AuthorizationBehavior`2.Handle(`0,MediatR.RequestHandlerDelegate{`1},System.Threading.CancellationToken)">
            <summary>
            Handles the request by performing authorization checks before proceeding to the next behavior in the pipeline.
            </summary>
            <param name="request">The request to authorize and handle.</param>
            <param name="next">The next delegate in the pipeline.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The response from the next behavior in the pipeline.</returns>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when the user is not authorized for the requested operation.</exception>
        </member>
        <member name="M:FunnyActivities.Application.Behaviors.AuthorizationBehavior`2.GetPolicyForRequest(`0)">
            <summary>
            Determines the authorization policy required for the given request type.
            </summary>
            <param name="request">The request to evaluate.</param>
            <returns>The name of the required policy, or null if no authorization is required.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Behaviors.ValidationBehavior`2">
            <summary>
            MediatR pipeline behavior that validates requests using FluentValidation validators.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
        </member>
        <member name="M:FunnyActivities.Application.Behaviors.ValidationBehavior`2.#ctor(FluentValidation.IValidator{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Behaviors.ValidationBehavior`2"/> class.
            </summary>
            <param name="validator">The validator for the request type, if available.</param>
        </member>
        <member name="M:FunnyActivities.Application.Behaviors.ValidationBehavior`2.Handle(`0,MediatR.RequestHandlerDelegate{`1},System.Threading.CancellationToken)">
            <summary>
            Handles the request by validating it before proceeding to the next behavior in the pipeline.
            </summary>
            <param name="request">The request to validate and handle.</param>
            <param name="next">The next delegate in the pipeline.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The response from the next behavior in the pipeline.</returns>
            <exception cref="T:FluentValidation.ValidationException">Thrown when validation fails.</exception>
        </member>
        <member name="T:FunnyActivities.Application.Commands.BaseProductManagement.CreateBaseProductCommand">
            <summary>
            Command for creating a new base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.BaseProductManagement.CreateBaseProductCommand.Name">
            <summary>
            Gets or sets the name of the base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.BaseProductManagement.CreateBaseProductCommand.Description">
            <summary>
            Gets or sets the description of the base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.BaseProductManagement.CreateBaseProductCommand.CategoryId">
            <summary>
            Gets or sets the category ID of the base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.BaseProductManagement.CreateBaseProductCommand.UserId">
            <summary>
            Gets or sets the ID of the user creating the base product.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.BaseProductManagement.DeleteBaseProductCommand">
            <summary>
            Command for deleting a base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.BaseProductManagement.DeleteBaseProductCommand.Id">
            <summary>
            Gets or sets the unique identifier of the base product to delete.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.BaseProductManagement.DeleteBaseProductCommand.UserId">
            <summary>
            Gets or sets the ID of the user deleting the base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.BaseProductManagement.DeleteBaseProductCommand.CascadeDeleteVariants">
            <summary>
            Gets or sets a value indicating whether to cascade delete variants.
            Defaults to false for backward compatibility.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.BaseProductManagement.UpdateBaseProductCommand">
            <summary>
            Command for updating an existing base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.BaseProductManagement.UpdateBaseProductCommand.Id">
            <summary>
            Gets or sets the unique identifier of the base product to update.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.BaseProductManagement.UpdateBaseProductCommand.Name">
            <summary>
            Gets or sets the name of the base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.BaseProductManagement.UpdateBaseProductCommand.Description">
            <summary>
            Gets or sets the description of the base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.BaseProductManagement.UpdateBaseProductCommand.CategoryId">
            <summary>
            Gets or sets the category ID of the base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.BaseProductManagement.UpdateBaseProductCommand.UserId">
            <summary>
            Gets or sets the ID of the user updating the base product.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.CategoryManagement.CreateCategoryCommand">
            <summary>
            Command for creating a new category.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.CategoryManagement.CreateCategoryCommand.Name">
            <summary>
            Gets or sets the name of the category.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.CategoryManagement.CreateCategoryCommand.Description">
            <summary>
            Gets or sets the description of the category.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.CategoryManagement.CreateCategoryCommand.UserId">
            <summary>
            Gets or sets the ID of the user creating the category.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.CategoryManagement.DeleteCategoryCommand">
            <summary>
            Command for deleting a category.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.CategoryManagement.DeleteCategoryCommand.Id">
            <summary>
            Gets or sets the unique identifier of the category to delete.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.CategoryManagement.DeleteCategoryCommand.UserId">
            <summary>
            Gets or sets the ID of the user deleting the category.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.CategoryManagement.UpdateCategoryCommand">
            <summary>
            Command for updating an existing category.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.CategoryManagement.UpdateCategoryCommand.Id">
            <summary>
            Gets or sets the unique identifier of the category.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.CategoryManagement.UpdateCategoryCommand.Name">
            <summary>
            Gets or sets the name of the category.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.CategoryManagement.UpdateCategoryCommand.Description">
            <summary>
            Gets or sets the description of the category.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.CategoryManagement.UpdateCategoryCommand.UserId">
            <summary>
            Gets or sets the ID of the user updating the category.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.MigrationManagement.BulkMigrateMaterialsToProductVariantsCommand">
            <summary>
            Command for bulk migrating materials to the new BaseProduct/ProductVariant model.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.MigrationManagement.BulkMigrateMaterialsToProductVariantsCommand.MaterialIds">
            <summary>
            Gets or sets the list of material IDs to migrate. If null or empty, migrates all materials.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.MigrationManagement.BulkMigrateMaterialsToProductVariantsCommand.UserId">
            <summary>
            Gets or sets the ID of the user performing the migration.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.MigrationManagement.BulkMigrateMaterialsToProductVariantsCommand.BatchSize">
            <summary>
            Gets or sets the batch size for processing materials.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.MigrationManagement.BulkMigrateMaterialsToProductVariantsCommand.SkipValidation">
            <summary>
            Gets or sets a value indicating whether to skip validation checks.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.MigrationManagement.BulkMigrateMaterialsToProductVariantsCommand.ContinueOnError">
            <summary>
            Gets or sets a value indicating whether to continue processing on individual failures.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.MigrationManagement.BulkMigrateMaterialsToProductVariantsCommand.ForceMigration">
            <summary>
            Gets or sets a value indicating whether to force migration even if data issues exist.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.MigrationManagement.MigrateMaterialToProductVariantCommand">
            <summary>
            Command for migrating a single material to the new BaseProduct/ProductVariant model.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.MigrationManagement.MigrateMaterialToProductVariantCommand.MaterialId">
            <summary>
            Gets or sets the ID of the material to migrate.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.MigrationManagement.MigrateMaterialToProductVariantCommand.UserId">
            <summary>
            Gets or sets the ID of the user performing the migration.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.MigrationManagement.MigrateMaterialToProductVariantCommand.SkipValidation">
            <summary>
            Gets or sets a value indicating whether to skip validation checks.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.MigrationManagement.MigrateMaterialToProductVariantCommand.ForceMigration">
            <summary>
            Gets or sets a value indicating whether to force migration even if data issues exist.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.ProductVariantManagement.BulkUpdateProductVariantsCommand">
            <summary>
            Command for bulk updating multiple product variants.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.BulkUpdateProductVariantsCommand.Updates">
            <summary>
            Gets or sets the list of variant updates.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.BulkUpdateProductVariantsCommand.UserId">
            <summary>
            Gets or sets the ID of the user performing the bulk update.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.ProductVariantManagement.ProductVariantUpdateRequest">
            <summary>
            Request model for individual variant update in bulk operation.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.ProductVariantUpdateRequest.Id">
            <summary>
            Gets or sets the unique identifier of the product variant to update.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.ProductVariantUpdateRequest.Name">
            <summary>
            Gets or sets the name of the variant.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.ProductVariantUpdateRequest.StockQuantity">
            <summary>
            Gets or sets the stock quantity.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.ProductVariantUpdateRequest.UnitOfMeasureId">
            <summary>
            Gets or sets the unit of measure ID.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.ProductVariantUpdateRequest.UnitValue">
            <summary>
            Gets or sets the unit value.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.ProductVariantUpdateRequest.UsageNotes">
            <summary>
            Gets or sets the usage notes.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.ProductVariantUpdateRequest.PhotoFiles">
            <summary>
            Gets or sets the list of photo files to upload.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.ProductVariantUpdateRequest.DynamicProperties">
            <summary>
            Gets or sets the dynamic properties.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.ProductVariantManagement.BulkUpdateProductVariantsResponse">
            <summary>
            Response model for bulk update operation.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.BulkUpdateProductVariantsResponse.UpdatedVariants">
            <summary>
            Gets or sets the list of successfully updated variants.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.BulkUpdateProductVariantsResponse.Errors">
            <summary>
            Gets or sets the list of failed updates with error details.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.BulkUpdateProductVariantsResponse.TotalUpdates">
            <summary>
            Gets or sets the total number of updates attempted.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.BulkUpdateProductVariantsResponse.SuccessfulUpdates">
            <summary>
            Gets or sets the number of successful updates.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.BulkUpdateProductVariantsResponse.FailedUpdates">
            <summary>
            Gets or sets the number of failed updates.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.ProductVariantManagement.BulkUpdateError">
            <summary>
            Error details for failed bulk update operations.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.BulkUpdateError.VariantId">
            <summary>
            Gets or sets the ID of the variant that failed to update.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.BulkUpdateError.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.BulkUpdateError.ErrorType">
            <summary>
            Gets or sets the error type.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.ProductVariantManagement.CreateProductVariantCommand">
            <summary>
            Command for creating a new product variant.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.CreateProductVariantCommand.BaseProductId">
            <summary>
            Gets or sets the base product ID.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.CreateProductVariantCommand.Name">
            <summary>
            Gets or sets the name of the variant.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.CreateProductVariantCommand.StockQuantity">
            <summary>
            Gets or sets the initial stock quantity.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.CreateProductVariantCommand.UnitOfMeasureId">
            <summary>
            Gets or sets the unit of measure ID.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.CreateProductVariantCommand.UnitValue">
            <summary>
            Gets or sets the unit value.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.CreateProductVariantCommand.UsageNotes">
            <summary>
            Gets or sets the usage notes.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.CreateProductVariantCommand.PhotoFiles">
            <summary>
            Gets or sets the list of photo files to upload.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.CreateProductVariantCommand.DynamicProperties">
            <summary>
            Gets or sets the dynamic properties.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.CreateProductVariantCommand.UserId">
            <summary>
            Gets or sets the ID of the user creating the variant.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.ProductVariantManagement.DeleteProductVariantCommand">
            <summary>
            Command for deleting a product variant.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.DeleteProductVariantCommand.Id">
            <summary>
            Gets or sets the unique identifier of the product variant to delete.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.DeleteProductVariantCommand.UserId">
            <summary>
            Gets or sets the ID of the user deleting the variant.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.ProductVariantManagement.UpdateProductVariantCommand">
            <summary>
            Command for updating an existing product variant.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.UpdateProductVariantCommand.Id">
            <summary>
            Gets or sets the unique identifier of the product variant to update.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.UpdateProductVariantCommand.Name">
            <summary>
            Gets or sets the name of the variant.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.UpdateProductVariantCommand.StockQuantity">
            <summary>
            Gets or sets the stock quantity.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.UpdateProductVariantCommand.UnitOfMeasureId">
            <summary>
            Gets or sets the unit of measure ID.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.UpdateProductVariantCommand.UnitValue">
            <summary>
            Gets or sets the unit value.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.UpdateProductVariantCommand.UsageNotes">
            <summary>
            Gets or sets the usage notes.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.UpdateProductVariantCommand.PhotoFiles">
            <summary>
            Gets or sets the list of photo files to upload.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.UpdateProductVariantCommand.DynamicProperties">
            <summary>
            Gets or sets the dynamic properties.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ProductVariantManagement.UpdateProductVariantCommand.UserId">
            <summary>
            Gets or sets the ID of the user updating the variant.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.ShoppingCartManagement.AddToCartCommand">
            <summary>
            Command for adding an item to the shopping cart.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ShoppingCartManagement.AddToCartCommand.ProductVariantId">
            <summary>
            Gets or sets the product variant ID.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ShoppingCartManagement.AddToCartCommand.Quantity">
            <summary>
            Gets or sets the quantity to add.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ShoppingCartManagement.AddToCartCommand.UserId">
            <summary>
            Gets or sets the user ID.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.ShoppingCartManagement.RemoveFromCartCommand">
            <summary>
            Command for removing an item from the shopping cart.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ShoppingCartManagement.RemoveFromCartCommand.Id">
            <summary>
            Gets or sets the cart item ID.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ShoppingCartManagement.RemoveFromCartCommand.UserId">
            <summary>
            Gets or sets the user ID.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.ShoppingCartManagement.UpdateCartItemCommand">
            <summary>
            Command for updating a cart item quantity.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ShoppingCartManagement.UpdateCartItemCommand.Id">
            <summary>
            Gets or sets the cart item ID.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ShoppingCartManagement.UpdateCartItemCommand.Quantity">
            <summary>
            Gets or sets the new quantity.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.ShoppingCartManagement.UpdateCartItemCommand.UserId">
            <summary>
            Gets or sets the user ID.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.UnitManagement.CreateUnitCommand">
            <summary>
            Command for creating a new unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.UnitManagement.CreateUnitCommand.Request">
            <summary>
            Gets or sets the request data for creating a unit.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.UnitManagement.CreateUnitTypeCommand">
            <summary>
            Command for creating a new unit type.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.UnitManagement.CreateUnitTypeCommand.Request">
            <summary>
            Gets or sets the request data for creating a unit type.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.UnitManagement.DeleteUnitCommand">
            <summary>
            Command for deleting a unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.UnitManagement.DeleteUnitCommand.Id">
            <summary>
            Gets or sets the unique identifier of the unit to delete.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.UnitManagement.DeleteUnitTypeCommand">
            <summary>
            Command for deleting a unit type.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.UnitManagement.DeleteUnitTypeCommand.Id">
            <summary>
            Gets or sets the unique identifier of the unit type to delete.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.UnitManagement.UpdateUnitCommand">
            <summary>
            Command for updating an existing unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.UnitManagement.UpdateUnitCommand.Id">
            <summary>
            Gets or sets the unique identifier of the unit to update.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.UnitManagement.UpdateUnitCommand.Request">
            <summary>
            Gets or sets the request data for updating the unit.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.UnitManagement.UpdateUnitTypeCommand">
            <summary>
            Command for updating an existing unit type.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.UnitManagement.UpdateUnitTypeCommand.Id">
            <summary>
            Gets or sets the unique identifier of the unit type to update.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.UnitManagement.UpdateUnitTypeCommand.Request">
            <summary>
            Gets or sets the request data for updating the unit type.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.UnitOfMeasureManagement.CreateUnitOfMeasureCommand">
            <summary>
            Command for creating a new unit of measure.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.UnitOfMeasureManagement.CreateUnitOfMeasureCommand.Name">
            <summary>
            Gets or sets the name of the unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.UnitOfMeasureManagement.CreateUnitOfMeasureCommand.Symbol">
            <summary>
            Gets or sets the symbol of the unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.UnitOfMeasureManagement.CreateUnitOfMeasureCommand.Type">
            <summary>
            Gets or sets the type of the unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.UnitOfMeasureManagement.CreateUnitOfMeasureCommand.UserId">
            <summary>
            Gets or sets the ID of the user creating the unit.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.UnitOfMeasureManagement.DeleteUnitOfMeasureCommand">
            <summary>
            Command for deleting a unit of measure.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.UnitOfMeasureManagement.DeleteUnitOfMeasureCommand.Id">
            <summary>
            Gets or sets the unique identifier of the unit to delete.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Commands.UnitOfMeasureManagement.UpdateUnitOfMeasureCommand">
            <summary>
            Command for updating a unit of measure.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.UnitOfMeasureManagement.UpdateUnitOfMeasureCommand.Id">
            <summary>
            Gets or sets the unique identifier of the unit to update.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.UnitOfMeasureManagement.UpdateUnitOfMeasureCommand.Name">
            <summary>
            Gets or sets the name of the unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.UnitOfMeasureManagement.UpdateUnitOfMeasureCommand.Symbol">
            <summary>
            Gets or sets the symbol of the unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.UnitOfMeasureManagement.UpdateUnitOfMeasureCommand.Type">
            <summary>
            Gets or sets the type of the unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Commands.UnitOfMeasureManagement.UpdateUnitOfMeasureCommand.UserId">
            <summary>
            Gets or sets the ID of the user updating the unit.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto">
            <summary>
            Data transfer object for base product information.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto.Id">
            <summary>
            Gets or sets the unique identifier of the base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto.Name">
            <summary>
            Gets or sets the name of the base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto.Description">
            <summary>
            Gets or sets the description of the base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto.CategoryId">
            <summary>
            Gets or sets the category ID of the base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto.CategoryName">
            <summary>
            Gets or sets the category name of the base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto.CreatedAt">
            <summary>
            Gets or sets the date and time when the base product was created.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.BaseProductManagement.BaseProductDto.UpdatedAt">
            <summary>
            Gets or sets the date and time when the base product was last updated.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.BaseProductManagement.CreateBaseProductRequest">
            <summary>
            Request DTO for creating a new base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.BaseProductManagement.CreateBaseProductRequest.Name">
            <summary>
            Gets or sets the name of the base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.BaseProductManagement.CreateBaseProductRequest.Description">
            <summary>
            Gets or sets the description of the base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.BaseProductManagement.CreateBaseProductRequest.CategoryId">
            <summary>
            Gets or sets the category ID of the base product.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.BaseProductManagement.UpdateBaseProductRequest">
            <summary>
            Request DTO for updating an existing base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.BaseProductManagement.UpdateBaseProductRequest.Name">
            <summary>
            Gets or sets the name of the base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.BaseProductManagement.UpdateBaseProductRequest.Description">
            <summary>
            Gets or sets the description of the base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.BaseProductManagement.UpdateBaseProductRequest.CategoryId">
            <summary>
            Gets or sets the category ID of the base product.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto">
            <summary>
            Data transfer object for category information.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto.Id">
            <summary>
            Gets or sets the unique identifier of the category.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto.Name">
            <summary>
            Gets or sets the name of the category.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto.Description">
            <summary>
            Gets or sets the description of the category.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto.CreatedAt">
            <summary>
            Gets or sets the date and time when the category was created.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto.UpdatedAt">
            <summary>
            Gets or sets the date and time when the category was last updated.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.CategoryManagement.CategoryDto.ProductCount">
            <summary>
            Gets or sets the count of products in this category.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.CategoryManagement.CategoryWithProductsDto">
            <summary>
            Data transfer object for category information including related products.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.CategoryManagement.CategoryWithProductsDto.Id">
            <summary>
            Gets or sets the unique identifier of the category.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.CategoryManagement.CategoryWithProductsDto.Name">
            <summary>
            Gets or sets the name of the category.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.CategoryManagement.CategoryWithProductsDto.Description">
            <summary>
            Gets or sets the description of the category.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.CategoryManagement.CategoryWithProductsDto.CreatedAt">
            <summary>
            Gets or sets the date and time when the category was created.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.CategoryManagement.CategoryWithProductsDto.UpdatedAt">
            <summary>
            Gets or sets the date and time when the category was last updated.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.CategoryManagement.CategoryWithProductsDto.Products">
            <summary>
            Gets or sets the list of products in this category.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.CategoryManagement.CategoryWithProductsDto.TotalProducts">
            <summary>
            Gets or sets the total count of products in this category.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.CategoryManagement.CreateCategoryRequest">
            <summary>
            Request model for creating a new category.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.CategoryManagement.CreateCategoryRequest.Name">
            <summary>
            Gets or sets the name of the category.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.CategoryManagement.CreateCategoryRequest.Description">
            <summary>
            Gets or sets the description of the category.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.CategoryManagement.UpdateCategoryRequest">
            <summary>
            Request model for updating an existing category.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.CategoryManagement.UpdateCategoryRequest.Name">
            <summary>
            Gets or sets the name of the category.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.CategoryManagement.UpdateCategoryRequest.Description">
            <summary>
            Gets or sets the description of the category.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.MigrationManagement.BulkMigrationResultDto">
            <summary>
            DTO for bulk migration operation result.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.MigrationManagement.BulkMigrationResultDto.TotalProcessed">
            <summary>
            Gets or sets the total number of materials processed.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.MigrationManagement.BulkMigrationResultDto.SuccessfulMigrations">
            <summary>
            Gets or sets the number of successful migrations.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.MigrationManagement.BulkMigrationResultDto.FailedMigrations">
            <summary>
            Gets or sets the number of failed migrations.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.MigrationManagement.BulkMigrationResultDto.Results">
            <summary>
            Gets or sets the list of migration results.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.MigrationManagement.BulkMigrationResultDto.MigratedAt">
            <summary>
            Gets or sets the timestamp of the bulk migration.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.DTOs.MigrationManagement.BulkMigrationResultDto.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.DTOs.MigrationManagement.BulkMigrationResultDto"/> class.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.MigrationManagement.MigrationResultDto">
            <summary>
            DTO for migration operation result.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.MigrationManagement.MigrationResultDto.MaterialId">
            <summary>
            Gets or sets the ID of the migrated material.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.MigrationManagement.MigrationResultDto.BaseProductId">
            <summary>
            Gets or sets the ID of the created base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.MigrationManagement.MigrationResultDto.ProductVariantId">
            <summary>
            Gets or sets the ID of the created product variant.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.MigrationManagement.MigrationResultDto.Success">
            <summary>
            Gets or sets a value indicating whether the migration was successful.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.MigrationManagement.MigrationResultDto.ErrorMessage">
            <summary>
            Gets or sets the error message if migration failed.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.MigrationManagement.MigrationResultDto.MigratedAt">
            <summary>
            Gets or sets the timestamp of the migration.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.ProductsManagement.BulkUpdateProductVariantsRequest">
            <summary>
            Request DTO for bulk updating product variants.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.BulkUpdateProductVariantsRequest.Updates">
            <summary>
            Gets or sets the list of product variant updates.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.ProductsManagement.ProductVariantUpdateRequest">
            <summary>
            Request DTO for updating a single product variant in bulk operations.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.ProductVariantUpdateRequest.Id">
            <summary>
            Gets or sets the unique identifier of the product variant.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.ProductVariantUpdateRequest.Name">
            <summary>
            Gets or sets the name of the product variant.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.ProductVariantUpdateRequest.StockQuantity">
            <summary>
            Gets or sets the stock quantity of the product variant.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.ProductVariantUpdateRequest.UnitOfMeasureId">
            <summary>
            Gets or sets the unit of measure ID.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.ProductVariantUpdateRequest.UnitValue">
            <summary>
            Gets or sets the unit value.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.ProductVariantUpdateRequest.UsageNotes">
            <summary>
            Gets or sets the usage notes.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.ProductVariantUpdateRequest.DynamicProperties">
            <summary>
            Gets or sets the dynamic properties.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.ProductsManagement.CreateBaseProductRequest">
            <summary>
            Request DTO for creating a new base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.CreateBaseProductRequest.Name">
            <summary>
            Gets or sets the name of the base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.CreateBaseProductRequest.Description">
            <summary>
            Gets or sets the description of the base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.CreateBaseProductRequest.CategoryId">
            <summary>
            Gets or sets the category ID of the base product.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.ProductsManagement.ProductListDto">
            <summary>
            Data transfer object for product list information including variants.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.ProductListDto.Id">
            <summary>
            Gets or sets the unique identifier of the product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.ProductListDto.Name">
            <summary>
            Gets or sets the name of the product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.ProductListDto.Description">
            <summary>
            Gets or sets the description of the product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.ProductListDto.CategoryId">
            <summary>
            Gets or sets the category ID of the product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.ProductListDto.CategoryName">
            <summary>
            Gets or sets the category name of the product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.ProductListDto.BasePrice">
            <summary>
            Gets or sets the base price of the product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.ProductListDto.StockStatus">
            <summary>
            Gets or sets the stock status of the product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.ProductListDto.TotalVariants">
            <summary>
            Gets or sets the total number of variants for this product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.ProductListDto.Variants">
            <summary>
            Gets or sets the list of product variants.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.ProductListDto.CreatedAt">
            <summary>
            Gets or sets the creation date and time.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.ProductListDto.UpdatedAt">
            <summary>
            Gets or sets the last update date and time.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.ProductsManagement.UpdateBaseProductRequest">
            <summary>
            Request DTO for updating an existing base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.UpdateBaseProductRequest.Name">
            <summary>
            Gets or sets the name of the base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.UpdateBaseProductRequest.Description">
            <summary>
            Gets or sets the description of the base product.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductsManagement.UpdateBaseProductRequest.CategoryId">
            <summary>
            Gets or sets the category ID of the base product.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.ProductVariantManagement.CreateProductVariantRequest">
            <summary>
            Request DTO for creating a new product variant.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.CreateProductVariantRequest.BaseProductId">
            <summary>
            Gets or sets the base product ID.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.CreateProductVariantRequest.Name">
            <summary>
            Gets or sets the name of the variant.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.CreateProductVariantRequest.StockQuantity">
            <summary>
            Gets or sets the initial stock quantity.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.CreateProductVariantRequest.UnitOfMeasureId">
            <summary>
            Gets or sets the unit of measure ID.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.CreateProductVariantRequest.UnitValue">
            <summary>
            Gets or sets the unit value.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.CreateProductVariantRequest.UsageNotes">
            <summary>
            Gets or sets the usage notes.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.CreateProductVariantRequest.PhotoFiles">
            <summary>
            Gets or sets the list of photo files to upload.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.CreateProductVariantRequest.DynamicProperties">
            <summary>
            Gets or sets the dynamic properties.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto">
            <summary>
            Data transfer object for product variant information.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto.Id">
            <summary>
            Gets or sets the unique identifier of the product variant.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto.BaseProductId">
            <summary>
            Gets or sets the base product ID.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto.BaseProductName">
            <summary>
            Gets or sets the base product name.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto.BaseProductDescription">
            <summary>
            Gets or sets the base product description.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto.BaseProductCategoryId">
            <summary>
            Gets or sets the base product category ID.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto.BaseProductCategoryName">
            <summary>
            Gets or sets the base product category name.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto.Name">
            <summary>
            Gets or sets the name of the variant.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto.StockQuantity">
            <summary>
            Gets or sets the current stock quantity of the variant.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto.UnitOfMeasureId">
            <summary>
            Gets or sets the unit of measure ID.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto.UnitOfMeasureName">
            <summary>
            Gets or sets the unit of measure name.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto.UnitSymbol">
            <summary>
            Gets or sets the unit symbol.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto.UnitValue">
            <summary>
            Gets or sets the unit value of the variant.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto.UsageNotes">
            <summary>
            Gets or sets the usage notes for the variant.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto.Photos">
            <summary>
            Gets or sets the list of photo URLs for the variant.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto.DynamicProperties">
            <summary>
            Gets or sets the dynamic properties for the variant.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto.CreatedAt">
            <summary>
            Gets or sets the date and time when the variant was created.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.ProductVariantDto.UpdatedAt">
            <summary>
            Gets or sets the date and time when the variant was last updated.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.ProductVariantManagement.UpdateProductVariantRequest">
            <summary>
            Request DTO for updating an existing product variant.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.UpdateProductVariantRequest.Name">
            <summary>
            Gets or sets the name of the variant.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.UpdateProductVariantRequest.StockQuantity">
            <summary>
            Gets or sets the stock quantity.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.UpdateProductVariantRequest.UnitOfMeasureId">
            <summary>
            Gets or sets the unit of measure ID.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.UpdateProductVariantRequest.UnitValue">
            <summary>
            Gets or sets the unit value.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.UpdateProductVariantRequest.UsageNotes">
            <summary>
            Gets or sets the usage notes.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.UpdateProductVariantRequest.PhotoFiles">
            <summary>
            Gets or sets the list of photo files to upload.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ProductVariantManagement.UpdateProductVariantRequest.DynamicProperties">
            <summary>
            Gets or sets the dynamic properties.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.Shared.ApiResponse`1">
            <summary>
            Standardized API response wrapper for consistent response format across all endpoints.
            </summary>
            <typeparam name="T">The type of data to be returned in the response.</typeparam>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.Shared.ApiResponse`1.Success">
            <summary>
            Indicates whether the operation was successful.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.Shared.ApiResponse`1.Message">
            <summary>
            A message describing the result of the operation.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.Shared.ApiResponse`1.Data">
            <summary>
            The actual data returned by the operation. Null for error responses.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.DTOs.Shared.ApiResponse`1.CreateSuccess(`0,System.String)">
            <summary>
            Creates a successful response with data.
            </summary>
            <param name="data">The data to include in the response.</param>
            <param name="message">Optional success message.</param>
            <returns>A successful ApiResponse instance.</returns>
        </member>
        <member name="M:FunnyActivities.Application.DTOs.Shared.ApiResponse`1.CreateSuccess(System.String)">
            <summary>
            Creates a successful response without data (for operations like DELETE).
            </summary>
            <param name="message">Optional success message.</param>
            <returns>A successful ApiResponse instance with null data.</returns>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.Shared.ApiErrorResponse">
            <summary>
            Standardized API error response wrapper for consistent error format across all endpoints.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.Shared.ApiErrorResponse.Success">
            <summary>
            Indicates whether the operation was successful (always false for errors).
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.Shared.ApiErrorResponse.Message">
            <summary>
            A message describing the error that occurred.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.Shared.ApiErrorResponse.Error">
            <summary>
            The type or category of the error.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.DTOs.Shared.ApiErrorResponse.CreateError(System.String,System.String)">
            <summary>
            Creates an error response.
            </summary>
            <param name="message">The error message.</param>
            <param name="error">The error type or category.</param>
            <returns>An ApiErrorResponse instance.</returns>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.Shared.BulkOperationResult`1">
            <summary>
            Represents the result of a bulk operation for a single item.
            </summary>
            <typeparam name="T">The type of the result data.</typeparam>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.Shared.BulkOperationResult`1.Index">
            <summary>
            Gets or sets the index of the item in the original request.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.Shared.BulkOperationResult`1.Success">
            <summary>
            Gets or sets a value indicating whether the operation was successful.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.Shared.BulkOperationResult`1.Data">
            <summary>
            Gets or sets the result data if the operation was successful.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.Shared.BulkOperationResult`1.Error">
            <summary>
            Gets or sets the error message if the operation failed.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.Shared.BulkOperationResult`1.ErrorDetails">
            <summary>
            Gets or sets additional error details if the operation failed.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.Shared.PagedResult`1">
            <summary>
            Represents a paged result with items and pagination metadata.
            Provides efficient navigation through large datasets by breaking them into manageable pages.
            </summary>
            <typeparam name="T">The type of items in the result.</typeparam>
            <example>
            {
              "items": [
                {
                  "id": "550e8400-e29b-41d4-a716-446655440000",
                  "name": "Steel Pipe 2-inch",
                  "category": "Plumbing",
                  "stockQuantity": 150.5,
                  "unit": "Meters"
                }
              ],
              "page": 1,
              "pageSize": 10,
              "totalCount": 25,
              "totalPages": 3,
              "hasPreviousPage": false,
              "hasNextPage": true
            }
            </example>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.Shared.PagedResult`1.Items">
            <summary>
            Gets or sets the items in the current page.
            Collection of items for the requested page.
            </summary>
            <example>Array of MaterialListDto objects</example>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.Shared.PagedResult`1.Page">
            <summary>
            Gets or sets the current page number (1-based).
            The page number being displayed, starting from 1.
            </summary>
            <example>1</example>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.Shared.PagedResult`1.PageSize">
            <summary>
            Gets or sets the number of items per page.
            Maximum number of items returned in a single page.
            </summary>
            <example>10</example>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.Shared.PagedResult`1.TotalCount">
            <summary>
            Gets or sets the total number of items across all pages.
            Total count of items available in the complete dataset.
            </summary>
            <example>25</example>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.Shared.PagedResult`1.TotalPages">
            <summary>
            Gets the total number of pages.
            Calculated based on total count and page size.
            </summary>
            <example>3</example>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.Shared.PagedResult`1.HasPreviousPage">
            <summary>
            Gets a value indicating whether there is a previous page.
            True if current page is greater than 1.
            </summary>
            <example>false</example>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.Shared.PagedResult`1.HasNextPage">
            <summary>
            Gets a value indicating whether there is a next page.
            True if current page is less than total pages.
            </summary>
            <example>true</example>
        </member>
        <member name="M:FunnyActivities.Application.DTOs.Shared.PagedResult`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.DTOs.Shared.PagedResult`1"/> class.
            </summary>
            <param name="items">The items in the current page.</param>
            <param name="page">The current page number.</param>
            <param name="pageSize">The number of items per page.</param>
            <param name="totalCount">The total number of items.</param>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.ShoppingCartManagement.AddToCartRequest">
            <summary>
            Request DTO for adding an item to the shopping cart.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ShoppingCartManagement.AddToCartRequest.ProductVariantId">
            <summary>
            Gets or sets the product variant ID.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ShoppingCartManagement.AddToCartRequest.Quantity">
            <summary>
            Gets or sets the quantity to add.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.ShoppingCartManagement.ShoppingCartItemDto">
            <summary>
            Data transfer object for shopping cart item information.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ShoppingCartManagement.ShoppingCartItemDto.Id">
            <summary>
            Gets or sets the unique identifier of the cart item.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ShoppingCartManagement.ShoppingCartItemDto.ProductVariantId">
            <summary>
            Gets or sets the product variant ID.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ShoppingCartManagement.ShoppingCartItemDto.ProductVariantName">
            <summary>
            Gets or sets the product variant name.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ShoppingCartManagement.ShoppingCartItemDto.UserId">
            <summary>
            Gets or sets the user ID.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ShoppingCartManagement.ShoppingCartItemDto.Quantity">
            <summary>
            Gets or sets the quantity of the item in the cart.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ShoppingCartManagement.ShoppingCartItemDto.AddedAt">
            <summary>
            Gets or sets the date and time when the item was added to the cart.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.ShoppingCartManagement.UpdateCartItemRequest">
            <summary>
            Request DTO for updating a cart item quantity.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.ShoppingCartManagement.UpdateCartItemRequest.Quantity">
            <summary>
            Gets or sets the new quantity.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.UnitManagement.CreateUnitRequest">
            <summary>
            Request DTO for creating a new unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitManagement.CreateUnitRequest.Name">
            <summary>
            Gets or sets the name of the unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitManagement.CreateUnitRequest.Description">
            <summary>
            Gets or sets the description of the unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitManagement.CreateUnitRequest.UnitTypeId">
            <summary>
            Gets or sets the unit type identifier.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.UnitManagement.CreateUnitTypeRequest">
            <summary>
            Request DTO for creating a new unit type.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitManagement.CreateUnitTypeRequest.Name">
            <summary>
            Gets or sets the name of the unit type.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitManagement.CreateUnitTypeRequest.Description">
            <summary>
            Gets or sets the description of the unit type.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.UnitManagement.UnitDto">
            <summary>
            Data transfer object for unit information.
            Represents specific units like mm, Litre, kg, etc.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitManagement.UnitDto.Id">
            <summary>
            Gets or sets the unique identifier of the unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitManagement.UnitDto.Name">
            <summary>
            Gets or sets the name of the unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitManagement.UnitDto.Description">
            <summary>
            Gets or sets the description of the unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitManagement.UnitDto.UnitTypeId">
            <summary>
            Gets or sets the unit type identifier.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitManagement.UnitDto.UnitTypeName">
            <summary>
            Gets or sets the unit type name.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitManagement.UnitDto.CreatedAt">
            <summary>
            Gets or sets the date and time when the unit was created.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitManagement.UnitDto.UpdatedAt">
            <summary>
            Gets or sets the date and time when the unit was last updated.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.UnitManagement.UnitTypeDto">
            <summary>
            Data transfer object for unit type information.
            Represents categories of units like Length, Volume, Weight, etc.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitManagement.UnitTypeDto.Id">
            <summary>
            Gets or sets the unique identifier of the unit type.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitManagement.UnitTypeDto.Name">
            <summary>
            Gets or sets the name of the unit type.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitManagement.UnitTypeDto.Description">
            <summary>
            Gets or sets the description of the unit type.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitManagement.UnitTypeDto.CreatedAt">
            <summary>
            Gets or sets the date and time when the unit type was created.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitManagement.UnitTypeDto.UpdatedAt">
            <summary>
            Gets or sets the date and time when the unit type was last updated.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.UnitManagement.UpdateUnitRequest">
            <summary>
            Request DTO for updating an existing unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitManagement.UpdateUnitRequest.Name">
            <summary>
            Gets or sets the name of the unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitManagement.UpdateUnitRequest.Description">
            <summary>
            Gets or sets the description of the unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitManagement.UpdateUnitRequest.UnitTypeId">
            <summary>
            Gets or sets the unit type identifier.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.UnitManagement.UpdateUnitTypeRequest">
            <summary>
            Request DTO for updating an existing unit type.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitManagement.UpdateUnitTypeRequest.Name">
            <summary>
            Gets or sets the name of the unit type.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitManagement.UpdateUnitTypeRequest.Description">
            <summary>
            Gets or sets the description of the unit type.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.UnitOfMeasureManagement.CreateUnitOfMeasureRequest">
            <summary>
            Request DTO for creating a new unit of measure.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitOfMeasureManagement.CreateUnitOfMeasureRequest.Name">
            <summary>
            Gets or sets the name of the unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitOfMeasureManagement.CreateUnitOfMeasureRequest.Symbol">
            <summary>
            Gets or sets the symbol of the unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitOfMeasureManagement.CreateUnitOfMeasureRequest.Type">
            <summary>
            Gets or sets the type of the unit.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UnitOfMeasureDto">
            <summary>
            Data transfer object for unit of measure information.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UnitOfMeasureDto.Id">
            <summary>
            Gets or sets the unique identifier of the unit of measure.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UnitOfMeasureDto.Name">
            <summary>
            Gets or sets the name of the unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UnitOfMeasureDto.Symbol">
            <summary>
            Gets or sets the symbol of the unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UnitOfMeasureDto.Type">
            <summary>
            Gets or sets the type of the unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UnitOfMeasureDto.CreatedAt">
            <summary>
            Gets or sets the date and time when the unit was created.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UnitOfMeasureDto.UpdatedAt">
            <summary>
            Gets or sets the date and time when the unit was last updated.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UpdateUnitOfMeasureRequest">
            <summary>
            Request DTO for updating a unit of measure.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UpdateUnitOfMeasureRequest.Name">
            <summary>
            Gets or sets the name of the unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UpdateUnitOfMeasureRequest.Symbol">
            <summary>
            Gets or sets the symbol of the unit.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.DTOs.UnitOfMeasureManagement.UpdateUnitOfMeasureRequest.Type">
            <summary>
            Gets or sets the type of the unit.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.BaseProductManagement.CreateBaseProductCommandHandler">
            <summary>
            Handler for creating a new base product.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.BaseProductManagement.CreateBaseProductCommandHandler.#ctor(FunnyActivities.Application.Interfaces.IBaseProductRepository,MediatR.IMediator,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.BaseProductManagement.CreateBaseProductCommandHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.BaseProductManagement.CreateBaseProductCommandHandler"/> class.
            </summary>
            <param name="baseProductRepository">The base product repository.</param>
            <param name="mediator">The mediator for publishing events.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.BaseProductManagement.CreateBaseProductCommandHandler.Handle(FunnyActivities.Application.Commands.BaseProductManagement.CreateBaseProductCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the create base product command.
            </summary>
            <param name="request">The create base product command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The created base product DTO.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.BaseProductManagement.DeleteBaseProductCommandHandler">
            <summary>
            Handler for deleting a base product.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.BaseProductManagement.DeleteBaseProductCommandHandler.#ctor(FunnyActivities.Application.Interfaces.IBaseProductRepository,FunnyActivities.Application.Interfaces.IProductVariantRepository,MediatR.IMediator,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.BaseProductManagement.DeleteBaseProductCommandHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.BaseProductManagement.DeleteBaseProductCommandHandler"/> class.
            </summary>
            <param name="baseProductRepository">The base product repository.</param>
            <param name="productVariantRepository">The product variant repository.</param>
            <param name="mediator">The mediator for publishing events.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.BaseProductManagement.DeleteBaseProductCommandHandler.Handle(FunnyActivities.Application.Commands.BaseProductManagement.DeleteBaseProductCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the delete base product command.
            </summary>
            <param name="request">The delete base product command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A unit value indicating the operation completed.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.BaseProductManagement.GetBaseProductQueryHandler">
            <summary>
            Handler for retrieving a single base product by ID.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.BaseProductManagement.GetBaseProductQueryHandler.#ctor(FunnyActivities.Application.Interfaces.IBaseProductRepository,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.BaseProductManagement.GetBaseProductQueryHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.BaseProductManagement.GetBaseProductQueryHandler"/> class.
            </summary>
            <param name="baseProductRepository">The base product repository.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.BaseProductManagement.GetBaseProductQueryHandler.Handle(FunnyActivities.Application.Queries.BaseProductManagement.GetBaseProductQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the get base product query.
            </summary>
            <param name="request">The get base product query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The base product DTO.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.BaseProductManagement.GetBaseProductsQueryHandler">
            <summary>
            Handler for retrieving a list of base products with optional filtering and pagination.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.BaseProductManagement.GetBaseProductsQueryHandler.#ctor(FunnyActivities.Application.Interfaces.IBaseProductRepository,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.BaseProductManagement.GetBaseProductsQueryHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.BaseProductManagement.GetBaseProductsQueryHandler"/> class.
            </summary>
            <param name="baseProductRepository">The base product repository.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.BaseProductManagement.GetBaseProductsQueryHandler.Handle(FunnyActivities.Application.Queries.BaseProductManagement.GetBaseProductsQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the get base products query.
            </summary>
            <param name="request">The get base products query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A list of base product DTOs.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.BaseProductManagement.UpdateBaseProductCommandHandler">
            <summary>
            Handler for updating an existing base product.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.BaseProductManagement.UpdateBaseProductCommandHandler.#ctor(FunnyActivities.Application.Interfaces.IBaseProductRepository,MediatR.IMediator,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.BaseProductManagement.UpdateBaseProductCommandHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.BaseProductManagement.UpdateBaseProductCommandHandler"/> class.
            </summary>
            <param name="baseProductRepository">The base product repository.</param>
            <param name="mediator">The mediator for publishing events.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.BaseProductManagement.UpdateBaseProductCommandHandler.Handle(FunnyActivities.Application.Commands.BaseProductManagement.UpdateBaseProductCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the update base product command.
            </summary>
            <param name="request">The update base product command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The updated base product DTO.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.CategoryManagement.CategoryCreatedEventHandler">
            <summary>
            Handler for CategoryCreatedEvent.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.CategoryManagement.CategoryCreatedEventHandler.#ctor(Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.CategoryManagement.CategoryCreatedEventHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.CategoryManagement.CategoryCreatedEventHandler"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.CategoryManagement.CategoryCreatedEventHandler.Handle(FunnyActivities.Domain.Events.CategoryCreatedEvent,System.Threading.CancellationToken)">
            <summary>
            Handles the category created event.
            </summary>
            <param name="notification">The category created event.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.CategoryManagement.CategoryDeletedEventHandler">
            <summary>
            Handler for CategoryDeletedEvent.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.CategoryManagement.CategoryDeletedEventHandler.#ctor(Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.CategoryManagement.CategoryDeletedEventHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.CategoryManagement.CategoryDeletedEventHandler"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.CategoryManagement.CategoryDeletedEventHandler.Handle(FunnyActivities.Domain.Events.CategoryDeletedEvent,System.Threading.CancellationToken)">
            <summary>
            Handles the category deleted event.
            </summary>
            <param name="notification">The category deleted event.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.CategoryManagement.CategoryUpdatedEventHandler">
            <summary>
            Handler for CategoryUpdatedEvent.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.CategoryManagement.CategoryUpdatedEventHandler.#ctor(Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.CategoryManagement.CategoryUpdatedEventHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.CategoryManagement.CategoryUpdatedEventHandler"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.CategoryManagement.CategoryUpdatedEventHandler.Handle(FunnyActivities.Domain.Events.CategoryUpdatedEvent,System.Threading.CancellationToken)">
            <summary>
            Handles the category updated event.
            </summary>
            <param name="notification">The category updated event.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.CategoryManagement.CreateCategoryCommandHandler">
            <summary>
            Handler for creating a new category.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.CategoryManagement.CreateCategoryCommandHandler.#ctor(FunnyActivities.Application.Interfaces.ICategoryRepository,MediatR.IMediator,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.CategoryManagement.CreateCategoryCommandHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.CategoryManagement.CreateCategoryCommandHandler"/> class.
            </summary>
            <param name="categoryRepository">The category repository.</param>
            <param name="mediator">The mediator for publishing events.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.CategoryManagement.CreateCategoryCommandHandler.Handle(FunnyActivities.Application.Commands.CategoryManagement.CreateCategoryCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the create category command.
            </summary>
            <param name="request">The create category command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The created category DTO.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.CategoryManagement.DeleteCategoryCommandHandler">
            <summary>
            Handler for deleting a category.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.CategoryManagement.DeleteCategoryCommandHandler.#ctor(FunnyActivities.Application.Interfaces.ICategoryRepository,MediatR.IMediator,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.CategoryManagement.DeleteCategoryCommandHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.CategoryManagement.DeleteCategoryCommandHandler"/> class.
            </summary>
            <param name="categoryRepository">The category repository.</param>
            <param name="mediator">The mediator for publishing events.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.CategoryManagement.DeleteCategoryCommandHandler.Handle(FunnyActivities.Application.Commands.CategoryManagement.DeleteCategoryCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the delete category command.
            </summary>
            <param name="request">The delete category command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A unit value indicating the operation completed.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.CategoryManagement.GetCategoriesQueryHandler">
            <summary>
            Handler for retrieving a paginated list of categories.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.CategoryManagement.GetCategoriesQueryHandler.#ctor(FunnyActivities.Application.Interfaces.ICategoryRepository,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.CategoryManagement.GetCategoriesQueryHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.CategoryManagement.GetCategoriesQueryHandler"/> class.
            </summary>
            <param name="categoryRepository">The category repository.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.CategoryManagement.GetCategoriesQueryHandler.Handle(FunnyActivities.Application.Queries.CategoryManagement.GetCategoriesQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the get categories query.
            </summary>
            <param name="request">The get categories query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A paged result of category DTOs.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.CategoryManagement.GetCategoryQueryHandler">
            <summary>
            Handler for retrieving a specific category by ID.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.CategoryManagement.GetCategoryQueryHandler.#ctor(FunnyActivities.Application.Interfaces.ICategoryRepository,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.CategoryManagement.GetCategoryQueryHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.CategoryManagement.GetCategoryQueryHandler"/> class.
            </summary>
            <param name="categoryRepository">The category repository.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.CategoryManagement.GetCategoryQueryHandler.Handle(FunnyActivities.Application.Queries.CategoryManagement.GetCategoryQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the get category query.
            </summary>
            <param name="request">The get category query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The category DTO if found; otherwise, null.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.CategoryManagement.GetCategoryWithProductsQueryHandler">
            <summary>
            Handler for retrieving a category with all its associated products.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.CategoryManagement.GetCategoryWithProductsQueryHandler.#ctor(FunnyActivities.Application.Interfaces.ICategoryRepository,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.CategoryManagement.GetCategoryWithProductsQueryHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.CategoryManagement.GetCategoryWithProductsQueryHandler"/> class.
            </summary>
            <param name="categoryRepository">The category repository.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.CategoryManagement.GetCategoryWithProductsQueryHandler.Handle(FunnyActivities.Application.Queries.CategoryManagement.GetCategoryWithProductsQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the get category with products query.
            </summary>
            <param name="request">The get category with products query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The category with products DTO if found; otherwise, null.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.CategoryManagement.SearchCategoriesQueryHandler">
            <summary>
            Handler for searching categories based on a search term.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.CategoryManagement.SearchCategoriesQueryHandler.#ctor(FunnyActivities.Application.Interfaces.ICategoryRepository,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.CategoryManagement.SearchCategoriesQueryHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.CategoryManagement.SearchCategoriesQueryHandler"/> class.
            </summary>
            <param name="categoryRepository">The category repository.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.CategoryManagement.SearchCategoriesQueryHandler.Handle(FunnyActivities.Application.Queries.CategoryManagement.SearchCategoriesQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the search categories query.
            </summary>
            <param name="request">The search categories query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A paged result of category DTOs matching the search term.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.CategoryManagement.UpdateCategoryCommandHandler">
            <summary>
            Handler for updating an existing category.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.CategoryManagement.UpdateCategoryCommandHandler.#ctor(FunnyActivities.Application.Interfaces.ICategoryRepository,MediatR.IMediator,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.CategoryManagement.UpdateCategoryCommandHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.CategoryManagement.UpdateCategoryCommandHandler"/> class.
            </summary>
            <param name="categoryRepository">The category repository.</param>
            <param name="mediator">The mediator for publishing events.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.CategoryManagement.UpdateCategoryCommandHandler.Handle(FunnyActivities.Application.Commands.CategoryManagement.UpdateCategoryCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the update category command.
            </summary>
            <param name="request">The update category command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The updated category DTO.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.MigrationManagement.BulkMigrateMaterialsToProductVariantsCommandHandler">
            <summary>
            Handler for bulk migrating materials to the new BaseProduct/ProductVariant model.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.MigrationManagement.BulkMigrateMaterialsToProductVariantsCommandHandler.#ctor(FunnyActivities.Application.Interfaces.IMaterialRepository,FunnyActivities.Application.Interfaces.IBaseProductRepository,FunnyActivities.Application.Interfaces.IProductVariantRepository,FunnyActivities.Application.Interfaces.ICategoryRepository,FunnyActivities.Application.Interfaces.IUnitOfMeasureRepository,MediatR.IMediator,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.MigrationManagement.BulkMigrateMaterialsToProductVariantsCommandHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.MigrationManagement.BulkMigrateMaterialsToProductVariantsCommandHandler"/> class.
            </summary>
            <param name="materialRepository">The material repository.</param>
            <param name="baseProductRepository">The base product repository.</param>
            <param name="productVariantRepository">The product variant repository.</param>
            <param name="categoryRepository">The category repository.</param>
            <param name="unitOfMeasureRepository">The unit of measure repository.</param>
            <param name="mediator">The mediator for sending commands.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.MigrationManagement.BulkMigrateMaterialsToProductVariantsCommandHandler.Handle(FunnyActivities.Application.Commands.MigrationManagement.BulkMigrateMaterialsToProductVariantsCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the bulk migrate materials command.
            </summary>
            <param name="request">The bulk migrate materials command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The bulk migration result.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.MigrationManagement.MigrateMaterialToProductVariantCommandHandler">
            <summary>
            Handler for migrating a single material to the new BaseProduct/ProductVariant model.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.MigrationManagement.MigrateMaterialToProductVariantCommandHandler.#ctor(FunnyActivities.Application.Interfaces.IMaterialRepository,FunnyActivities.Application.Interfaces.IBaseProductRepository,FunnyActivities.Application.Interfaces.IProductVariantRepository,FunnyActivities.Application.Interfaces.ICategoryRepository,FunnyActivities.Application.Interfaces.IUnitOfMeasureRepository,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.MigrationManagement.MigrateMaterialToProductVariantCommandHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.MigrationManagement.MigrateMaterialToProductVariantCommandHandler"/> class.
            </summary>
            <param name="materialRepository">The material repository.</param>
            <param name="baseProductRepository">The base product repository.</param>
            <param name="productVariantRepository">The product variant repository.</param>
            <param name="categoryRepository">The category repository.</param>
            <param name="unitOfMeasureRepository">The unit of measure repository.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.MigrationManagement.MigrateMaterialToProductVariantCommandHandler.Handle(FunnyActivities.Application.Commands.MigrationManagement.MigrateMaterialToProductVariantCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the migrate material to product variant command.
            </summary>
            <param name="request">The migrate material command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The migration result.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.ProductVariantManagement.BulkUpdateProductVariantsCommandHandler">
            <summary>
            Handler for bulk updating product variants.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.ProductVariantManagement.BulkUpdateProductVariantsCommandHandler.#ctor(FunnyActivities.Application.Interfaces.IProductVariantRepository,FunnyActivities.Application.Interfaces.IUnitOfMeasureRepository,MediatR.IMediator,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.ProductVariantManagement.BulkUpdateProductVariantsCommandHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.ProductVariantManagement.BulkUpdateProductVariantsCommandHandler"/> class.
            </summary>
            <param name="productVariantRepository">The product variant repository.</param>
            <param name="unitOfMeasureRepository">The unit of measure repository.</param>
            <param name="mediator">The mediator for publishing events.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.ProductVariantManagement.BulkUpdateProductVariantsCommandHandler.Handle(FunnyActivities.Application.Commands.ProductVariantManagement.BulkUpdateProductVariantsCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the bulk update product variants command.
            </summary>
            <param name="request">The bulk update product variants command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The bulk update response.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.ProductVariantManagement.BulkUpdateProductVariantsCommandHandler.UpdateSingleVariantAsync(FunnyActivities.Application.Commands.ProductVariantManagement.ProductVariantUpdateRequest,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Updates a single product variant.
            </summary>
            <param name="updateRequest">The update request for the variant.</param>
            <param name="userId">The ID of the user performing the update.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The updated product variant DTO, or null if update failed.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.ProductVariantManagement.CreateProductVariantCommandHandler">
            <summary>
            Handler for creating a new product variant.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.ProductVariantManagement.CreateProductVariantCommandHandler.#ctor(FunnyActivities.Application.Interfaces.IProductVariantRepository,FunnyActivities.Application.Interfaces.IBaseProductRepository,FunnyActivities.Application.Interfaces.IUnitOfMeasureRepository,MediatR.IMediator,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.ProductVariantManagement.CreateProductVariantCommandHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.ProductVariantManagement.CreateProductVariantCommandHandler"/> class.
            </summary>
            <param name="productVariantRepository">The product variant repository.</param>
            <param name="baseProductRepository">The base product repository.</param>
            <param name="unitOfMeasureRepository">The unit of measure repository.</param>
            <param name="mediator">The mediator for publishing events.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.ProductVariantManagement.CreateProductVariantCommandHandler.Handle(FunnyActivities.Application.Commands.ProductVariantManagement.CreateProductVariantCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the create product variant command.
            </summary>
            <param name="request">The create product variant command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The created product variant DTO.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.ProductVariantManagement.DeleteProductVariantCommandHandler">
            <summary>
            Handler for deleting a product variant.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.ProductVariantManagement.DeleteProductVariantCommandHandler.#ctor(FunnyActivities.Application.Interfaces.IProductVariantRepository,MediatR.IMediator,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.ProductVariantManagement.DeleteProductVariantCommandHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.ProductVariantManagement.DeleteProductVariantCommandHandler"/> class.
            </summary>
            <param name="productVariantRepository">The product variant repository.</param>
            <param name="mediator">The mediator for publishing events.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.ProductVariantManagement.DeleteProductVariantCommandHandler.Handle(FunnyActivities.Application.Commands.ProductVariantManagement.DeleteProductVariantCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the delete product variant command.
            </summary>
            <param name="request">The delete product variant command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.ProductVariantManagement.GetProductVariantQueryHandler">
            <summary>
            Handler for getting a product variant by ID.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.ProductVariantManagement.GetProductVariantQueryHandler.#ctor(FunnyActivities.Application.Interfaces.IProductVariantRepository,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.ProductVariantManagement.GetProductVariantQueryHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.ProductVariantManagement.GetProductVariantQueryHandler"/> class.
            </summary>
            <param name="productVariantRepository">The product variant repository.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.ProductVariantManagement.GetProductVariantQueryHandler.Handle(FunnyActivities.Application.Queries.ProductVariantManagement.GetProductVariantQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the get product variant query.
            </summary>
            <param name="request">The get product variant query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The product variant DTO.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.ProductVariantManagement.GetProductVariantsQueryHandler">
            <summary>
            Handler for getting all product variants.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.ProductVariantManagement.GetProductVariantsQueryHandler.#ctor(FunnyActivities.Application.Interfaces.IProductVariantRepository,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.ProductVariantManagement.GetProductVariantsQueryHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.ProductVariantManagement.GetProductVariantsQueryHandler"/> class.
            </summary>
            <param name="productVariantRepository">The product variant repository.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.ProductVariantManagement.GetProductVariantsQueryHandler.Handle(FunnyActivities.Application.Queries.ProductVariantManagement.GetProductVariantsQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the get product variants query.
            </summary>
            <param name="request">The get product variants query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A list of product variant DTOs.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.ProductVariantManagement.UpdateProductVariantCommandHandler">
            <summary>
            Handler for updating a product variant.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.ProductVariantManagement.UpdateProductVariantCommandHandler.#ctor(FunnyActivities.Application.Interfaces.IProductVariantRepository,FunnyActivities.Application.Interfaces.IUnitOfMeasureRepository,MediatR.IMediator,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.ProductVariantManagement.UpdateProductVariantCommandHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.ProductVariantManagement.UpdateProductVariantCommandHandler"/> class.
            </summary>
            <param name="productVariantRepository">The product variant repository.</param>
            <param name="unitOfMeasureRepository">The unit of measure repository.</param>
            <param name="mediator">The mediator for publishing events.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.ProductVariantManagement.UpdateProductVariantCommandHandler.Handle(FunnyActivities.Application.Commands.ProductVariantManagement.UpdateProductVariantCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the update product variant command.
            </summary>
            <param name="request">The update product variant command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The updated product variant DTO.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.ShoppingCartManagement.AddToCartCommandHandler">
            <summary>
            Handler for adding an item to the shopping cart.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.ShoppingCartManagement.AddToCartCommandHandler.#ctor(FunnyActivities.Application.Interfaces.IShoppingCartItemRepository,FunnyActivities.Application.Interfaces.IProductVariantRepository,FunnyActivities.Application.Interfaces.IUserRepository,MediatR.IMediator,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.ShoppingCartManagement.AddToCartCommandHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.ShoppingCartManagement.AddToCartCommandHandler"/> class.
            </summary>
            <param name="shoppingCartItemRepository">The shopping cart item repository.</param>
            <param name="productVariantRepository">The product variant repository.</param>
            <param name="userRepository">The user repository.</param>
            <param name="mediator">The mediator for publishing events.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.ShoppingCartManagement.AddToCartCommandHandler.Handle(FunnyActivities.Application.Commands.ShoppingCartManagement.AddToCartCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the add to cart command.
            </summary>
            <param name="request">The add to cart command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The shopping cart item DTO.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.UnitManagement.GetUnitsQueryHandler">
            <summary>
            Handler for retrieving all units.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.UnitManagement.GetUnitsQueryHandler.#ctor(FunnyActivities.Application.Interfaces.IUnitOfMeasureRepository,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.UnitManagement.GetUnitsQueryHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.UnitManagement.GetUnitsQueryHandler"/> class.
            </summary>
            <param name="unitOfMeasureRepository">The unit of measure repository.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.UnitManagement.GetUnitsQueryHandler.Handle(FunnyActivities.Application.Queries.UnitManagement.GetUnitsQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the get units query.
            </summary>
            <param name="request">The get units query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A list of unit DTOs.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.UnitOfMeasureManagement.CreateUnitOfMeasureCommandHandler">
            <summary>
            Handler for creating a new unit of measure.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.UnitOfMeasureManagement.CreateUnitOfMeasureCommandHandler.#ctor(FunnyActivities.Application.Interfaces.IUnitOfMeasureRepository,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.UnitOfMeasureManagement.CreateUnitOfMeasureCommandHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.UnitOfMeasureManagement.CreateUnitOfMeasureCommandHandler"/> class.
            </summary>
            <param name="unitOfMeasureRepository">The unit of measure repository.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.UnitOfMeasureManagement.CreateUnitOfMeasureCommandHandler.Handle(FunnyActivities.Application.Commands.UnitOfMeasureManagement.CreateUnitOfMeasureCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the create unit of measure command.
            </summary>
            <param name="request">The create unit of measure command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The created unit of measure DTO.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.UnitOfMeasureManagement.DeleteUnitOfMeasureCommandHandler">
            <summary>
            Handler for deleting a unit of measure.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.UnitOfMeasureManagement.DeleteUnitOfMeasureCommandHandler.#ctor(FunnyActivities.Application.Interfaces.IUnitOfMeasureRepository,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.UnitOfMeasureManagement.DeleteUnitOfMeasureCommandHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.UnitOfMeasureManagement.DeleteUnitOfMeasureCommandHandler"/> class.
            </summary>
            <param name="unitOfMeasureRepository">The unit of measure repository.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.UnitOfMeasureManagement.DeleteUnitOfMeasureCommandHandler.Handle(FunnyActivities.Application.Commands.UnitOfMeasureManagement.DeleteUnitOfMeasureCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the delete unit of measure command.
            </summary>
            <param name="request">The delete unit of measure command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.UnitOfMeasureManagement.GetUnitOfMeasureQueryHandler">
            <summary>
            Handler for getting a unit of measure by ID.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.UnitOfMeasureManagement.GetUnitOfMeasureQueryHandler.#ctor(FunnyActivities.Application.Interfaces.IUnitOfMeasureRepository,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.UnitOfMeasureManagement.GetUnitOfMeasureQueryHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.UnitOfMeasureManagement.GetUnitOfMeasureQueryHandler"/> class.
            </summary>
            <param name="unitOfMeasureRepository">The unit of measure repository.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.UnitOfMeasureManagement.GetUnitOfMeasureQueryHandler.Handle(FunnyActivities.Application.Queries.UnitOfMeasureManagement.GetUnitOfMeasureQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the get unit of measure query.
            </summary>
            <param name="request">The get unit of measure query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The unit of measure DTO if found; otherwise, null.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.UnitOfMeasureManagement.GetUnitOfMeasuresQueryHandler">
            <summary>
            Handler for getting all units of measure.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.UnitOfMeasureManagement.GetUnitOfMeasuresQueryHandler.#ctor(FunnyActivities.Application.Interfaces.IUnitOfMeasureRepository,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.UnitOfMeasureManagement.GetUnitOfMeasuresQueryHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.UnitOfMeasureManagement.GetUnitOfMeasuresQueryHandler"/> class.
            </summary>
            <param name="unitOfMeasureRepository">The unit of measure repository.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.UnitOfMeasureManagement.GetUnitOfMeasuresQueryHandler.Handle(FunnyActivities.Application.Queries.UnitOfMeasureManagement.GetUnitOfMeasuresQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the get units of measure query.
            </summary>
            <param name="request">The get units of measure query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A collection of unit of measure DTOs.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Handlers.UnitOfMeasureManagement.UpdateUnitOfMeasureCommandHandler">
            <summary>
            Handler for updating a unit of measure.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.UnitOfMeasureManagement.UpdateUnitOfMeasureCommandHandler.#ctor(FunnyActivities.Application.Interfaces.IUnitOfMeasureRepository,Microsoft.Extensions.Logging.ILogger{FunnyActivities.Application.Handlers.UnitOfMeasureManagement.UpdateUnitOfMeasureCommandHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Handlers.UnitOfMeasureManagement.UpdateUnitOfMeasureCommandHandler"/> class.
            </summary>
            <param name="unitOfMeasureRepository">The unit of measure repository.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FunnyActivities.Application.Handlers.UnitOfMeasureManagement.UpdateUnitOfMeasureCommandHandler.Handle(FunnyActivities.Application.Commands.UnitOfMeasureManagement.UpdateUnitOfMeasureCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the update unit of measure command.
            </summary>
            <param name="request">The update unit of measure command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The updated unit of measure DTO.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Interfaces.IBaseProductRepository">
            <summary>
            Repository interface for BaseProduct entities.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IBaseProductRepository.GetByIdAsync(System.Guid)">
            <summary>
            Gets a base product by its ID.
            </summary>
            <param name="id">The base product ID.</param>
            <returns>The base product if found; otherwise, null.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IBaseProductRepository.GetPagedAsync(System.String,System.Nullable{System.Guid},System.Int32,System.Int32)">
            <summary>
            Gets a paged list of base products with optional filtering.
            </summary>
            <param name="searchTerm">The search term for filtering by name or description.</param>
            <param name="categoryId">The category ID for filtering.</param>
            <param name="pageNumber">The page number (1-based).</param>
            <param name="pageSize">The page size.</param>
            <returns>A list of base products.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IBaseProductRepository.GetByNameAsync(System.String)">
            <summary>
            Gets a base product by name.
            </summary>
            <param name="name">The base product name.</param>
            <returns>The base product if found; otherwise, null.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IBaseProductRepository.ExistsByNameAsync(System.String)">
            <summary>
            Checks if a base product exists by name.
            </summary>
            <param name="name">The name to check.</param>
            <returns>True if exists; otherwise, false.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IBaseProductRepository.ExistsByNameExcludingIdAsync(System.String,System.Guid)">
            <summary>
            Checks if a base product exists by name excluding a specific ID.
            </summary>
            <param name="name">The name to check.</param>
            <param name="excludeId">The ID to exclude from the check.</param>
            <returns>True if exists; otherwise, false.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IBaseProductRepository.AddAsync(FunnyActivities.Domain.Entities.BaseProduct)">
            <summary>
            Adds a new base product.
            </summary>
            <param name="baseProduct">The base product to add.</param>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IBaseProductRepository.UpdateAsync(FunnyActivities.Domain.Entities.BaseProduct)">
            <summary>
            Updates an existing base product.
            </summary>
            <param name="baseProduct">The base product to update.</param>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IBaseProductRepository.DeleteAsync(FunnyActivities.Domain.Entities.BaseProduct)">
            <summary>
            Deletes a base product.
            </summary>
            <param name="baseProduct">The base product to delete.</param>
        </member>
        <member name="T:FunnyActivities.Application.Interfaces.ICategoryRepository">
            <summary>
            Repository interface for Category entities.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.ICategoryRepository.GetByIdAsync(System.Guid)">
            <summary>
            Gets a category by its ID.
            </summary>
            <param name="id">The category ID.</param>
            <returns>The category if found; otherwise, null.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.ICategoryRepository.GetByNameAsync(System.String)">
            <summary>
            Gets a category by its name.
            </summary>
            <param name="name">The category name.</param>
            <returns>The category if found; otherwise, null.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.ICategoryRepository.GetAllAsync">
            <summary>
            Gets all categories.
            </summary>
            <returns>A list of all categories.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.ICategoryRepository.ExistsByNameAsync(System.String)">
            <summary>
            Checks if a category exists by name.
            </summary>
            <param name="name">The name to check.</param>
            <returns>True if exists; otherwise, false.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.ICategoryRepository.ExistsByNameExcludingIdAsync(System.String,System.Guid)">
            <summary>
            Checks if a category exists by name excluding a specific ID.
            </summary>
            <param name="name">The name to check.</param>
            <param name="excludeId">The ID to exclude from the check.</param>
            <returns>True if exists; otherwise, false.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.ICategoryRepository.AddAsync(FunnyActivities.Domain.Entities.Category)">
            <summary>
            Adds a new category.
            </summary>
            <param name="category">The category to add.</param>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.ICategoryRepository.UpdateAsync(FunnyActivities.Domain.Entities.Category)">
            <summary>
            Updates an existing category.
            </summary>
            <param name="category">The category to update.</param>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.ICategoryRepository.DeleteAsync(FunnyActivities.Domain.Entities.Category)">
            <summary>
            Deletes a category.
            </summary>
            <param name="category">The category to delete.</param>
        </member>
        <member name="T:FunnyActivities.Application.Interfaces.IFileUploadService">
            <summary>
            Interface for file upload operations.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IFileUploadService.UploadMaterialPhotosAsync(System.Guid,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Http.IFormFile},System.Guid)">
            <summary>
            Uploads multiple files for a material.
            </summary>
            <param name="materialId">The material ID.</param>
            <param name="photos">The photos to upload.</param>
            <param name="userId">The user ID performing the upload.</param>
            <returns>A task representing the upload operation.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IFileUploadService.DeleteFileAsync(System.String)">
            <summary>
            Deletes a file by its ID.
            </summary>
            <param name="fileId">The file ID to delete.</param>
            <returns>True if deleted successfully; otherwise, false.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IFileUploadService.GetFileUrlAsync(System.String,System.Int32)">
            <summary>
            Gets the URL for a file.
            </summary>
            <param name="fileId">The file ID.</param>
            <param name="expiryInSeconds">Expiry time in seconds.</param>
            <returns>The file URL.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Interfaces.UploadPhotosResult">
            <summary>
            Result of uploading photos.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Interfaces.UploadPhotosResult.PhotoUrls">
            <summary>
            Gets or sets the uploaded photo URLs.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Interfaces.UploadPhotosResult.Errors">
            <summary>
            Gets or sets the upload errors.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Interfaces.UploadPhotosResult.Success">
            <summary>
            Gets or sets a value indicating whether the upload was successful.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Interfaces.IMaterialRepository">
            <summary>
            Repository interface for accessing Material data during migration.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IMaterialRepository.GetByIdAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets a material by its ID.
            </summary>
            <param name="id">The material ID.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The material data if found; otherwise, null.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IMaterialRepository.GetAllIdsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all material IDs for migration.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A list of all material IDs.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IMaterialRepository.GetBatchAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets materials in batches for migration.
            </summary>
            <param name="skip">The number of materials to skip.</param>
            <param name="take">The number of materials to take.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A list of material data.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Interfaces.MaterialData">
            <summary>
            Represents material data for migration purposes.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Interfaces.MaterialData.Id">
            <summary>
            Gets or sets the ID of the material.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Interfaces.MaterialData.Name">
            <summary>
            Gets or sets the name of the material.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Interfaces.MaterialData.Description">
            <summary>
            Gets or sets the description of the material.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Interfaces.MaterialData.CategoryId">
            <summary>
            Gets or sets the category ID of the material.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Interfaces.MaterialData.UnitType">
            <summary>
            Gets or sets the unit type of the material.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Interfaces.MaterialData.UnitValue">
            <summary>
            Gets or sets the unit value of the material.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Interfaces.MaterialData.StockQuantity">
            <summary>
            Gets or sets the stock quantity of the material.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Interfaces.MaterialData.UsageNotes">
            <summary>
            Gets or sets the usage notes of the material.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Interfaces.MaterialData.Photos">
            <summary>
            Gets or sets the photos JSON of the material.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Interfaces.MaterialData.DynamicProperties">
            <summary>
            Gets or sets the dynamic properties JSON of the material.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Interfaces.IProductVariantRepository">
            <summary>
            Repository interface for ProductVariant entity operations.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IProductVariantRepository.GetByIdAsync(System.Guid)">
            <summary>
            Gets a product variant by its ID.
            </summary>
            <param name="id">The product variant ID.</param>
            <returns>The product variant if found; otherwise, null.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IProductVariantRepository.GetAllAsync">
            <summary>
            Gets all product variants.
            </summary>
            <returns>A collection of all product variants.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IProductVariantRepository.GetByBaseProductIdAsync(System.Guid)">
            <summary>
            Gets product variants by base product ID.
            </summary>
            <param name="baseProductId">The base product ID.</param>
            <returns>A collection of product variants for the specified base product.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IProductVariantRepository.AddAsync(FunnyActivities.Domain.Entities.ProductVariant)">
            <summary>
            Adds a new product variant.
            </summary>
            <param name="productVariant">The product variant to add.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IProductVariantRepository.UpdateAsync(FunnyActivities.Domain.Entities.ProductVariant)">
            <summary>
            Updates an existing product variant.
            </summary>
            <param name="productVariant">The product variant to update.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IProductVariantRepository.DeleteAsync(FunnyActivities.Domain.Entities.ProductVariant)">
            <summary>
            Deletes a product variant.
            </summary>
            <param name="productVariant">The product variant to delete.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IProductVariantRepository.ExistsAsync(System.Guid)">
            <summary>
            Checks if a product variant exists by its ID.
            </summary>
            <param name="id">The product variant ID.</param>
            <returns>True if the product variant exists; otherwise, false.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IProductVariantRepository.GetByNameAsync(System.String)">
            <summary>
            Gets a product variant by name.
            </summary>
            <param name="name">The product variant name.</param>
            <returns>The product variant if found; otherwise, null.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IProductVariantRepository.GetByNameAndBaseProductAsync(System.String,System.Guid)">
            <summary>
            Gets a product variant by name and base product ID.
            </summary>
            <param name="name">The product variant name.</param>
            <param name="baseProductId">The base product ID.</param>
            <returns>The product variant if found; otherwise, null.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Interfaces.IShoppingCartItemRepository">
            <summary>
            Repository interface for ShoppingCartItem entity operations.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IShoppingCartItemRepository.GetByIdAsync(System.Guid)">
            <summary>
            Gets a shopping cart item by its ID.
            </summary>
            <param name="id">The shopping cart item ID.</param>
            <returns>The shopping cart item if found; otherwise, null.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IShoppingCartItemRepository.GetAllAsync">
            <summary>
            Gets all shopping cart items.
            </summary>
            <returns>A collection of all shopping cart items.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IShoppingCartItemRepository.GetByUserIdAsync(System.Guid)">
            <summary>
            Gets shopping cart items by user ID.
            </summary>
            <param name="userId">The user ID.</param>
            <returns>A collection of shopping cart items for the specified user.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IShoppingCartItemRepository.GetByUserAndProductVariantAsync(System.Guid,System.Guid)">
            <summary>
            Gets a shopping cart item by user ID and product variant ID.
            </summary>
            <param name="userId">The user ID.</param>
            <param name="productVariantId">The product variant ID.</param>
            <returns>The shopping cart item if found; otherwise, null.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IShoppingCartItemRepository.AddAsync(FunnyActivities.Domain.Entities.ShoppingCartItem)">
            <summary>
            Adds a new shopping cart item.
            </summary>
            <param name="shoppingCartItem">The shopping cart item to add.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IShoppingCartItemRepository.UpdateAsync(FunnyActivities.Domain.Entities.ShoppingCartItem)">
            <summary>
            Updates an existing shopping cart item.
            </summary>
            <param name="shoppingCartItem">The shopping cart item to update.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IShoppingCartItemRepository.DeleteAsync(FunnyActivities.Domain.Entities.ShoppingCartItem)">
            <summary>
            Deletes a shopping cart item.
            </summary>
            <param name="shoppingCartItem">The shopping cart item to delete.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IShoppingCartItemRepository.ExistsAsync(System.Guid)">
            <summary>
            Checks if a shopping cart item exists by its ID.
            </summary>
            <param name="id">The shopping cart item ID.</param>
            <returns>True if the shopping cart item exists; otherwise, false.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IShoppingCartItemRepository.DeleteByUserIdAsync(System.Guid)">
            <summary>
            Deletes all shopping cart items for a user.
            </summary>
            <param name="userId">The user ID.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Interfaces.IUnitOfMeasureRepository">
            <summary>
            Repository interface for UnitOfMeasure entity operations.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IUnitOfMeasureRepository.GetByIdAsync(System.Guid)">
            <summary>
            Gets a unit of measure by its ID.
            </summary>
            <param name="id">The unit of measure ID.</param>
            <returns>The unit of measure if found; otherwise, null.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IUnitOfMeasureRepository.GetAllAsync">
            <summary>
            Gets all units of measure.
            </summary>
            <returns>A collection of all units of measure.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IUnitOfMeasureRepository.GetByNameAsync(System.String)">
            <summary>
            Gets a unit of measure by name.
            </summary>
            <param name="name">The unit of measure name.</param>
            <returns>The unit of measure if found; otherwise, null.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IUnitOfMeasureRepository.AddAsync(FunnyActivities.Domain.Entities.UnitOfMeasure)">
            <summary>
            Adds a new unit of measure.
            </summary>
            <param name="unitOfMeasure">The unit of measure to add.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IUnitOfMeasureRepository.UpdateAsync(FunnyActivities.Domain.Entities.UnitOfMeasure)">
            <summary>
            Updates an existing unit of measure.
            </summary>
            <param name="unitOfMeasure">The unit of measure to update.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IUnitOfMeasureRepository.DeleteAsync(FunnyActivities.Domain.Entities.UnitOfMeasure)">
            <summary>
            Deletes a unit of measure.
            </summary>
            <param name="unitOfMeasure">The unit of measure to delete.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IUnitOfMeasureRepository.ExistsAsync(System.Guid)">
            <summary>
            Checks if a unit of measure exists by its ID.
            </summary>
            <param name="id">The unit of measure ID.</param>
            <returns>True if the unit of measure exists; otherwise, false.</returns>
        </member>
        <member name="M:FunnyActivities.Application.Interfaces.IUnitOfMeasureRepository.ExistsByNameAsync(System.String)">
            <summary>
            Checks if a unit of measure exists by name.
            </summary>
            <param name="name">The unit of measure name.</param>
            <returns>True if the unit of measure exists; otherwise, false.</returns>
        </member>
        <member name="T:FunnyActivities.Application.Queries.BaseProductManagement.GetBaseProductQuery">
            <summary>
            Query for retrieving a single base product by ID.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.BaseProductManagement.GetBaseProductQuery.Id">
            <summary>
            Gets or sets the unique identifier of the base product.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Queries.BaseProductManagement.GetBaseProductsQuery">
            <summary>
            Query for retrieving a list of base products with optional filtering and pagination.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.BaseProductManagement.GetBaseProductsQuery.SearchTerm">
            <summary>
            Gets or sets the search term for filtering base products by name or description.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.BaseProductManagement.GetBaseProductsQuery.CategoryId">
            <summary>
            Gets or sets the category ID for filtering base products.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.BaseProductManagement.GetBaseProductsQuery.PageNumber">
            <summary>
            Gets or sets the page number for pagination (1-based).
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.BaseProductManagement.GetBaseProductsQuery.PageSize">
            <summary>
            Gets or sets the page size for pagination.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Queries.CategoryManagement.GetCategoriesQuery">
            <summary>
            Query for retrieving a paginated list of categories.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.CategoryManagement.GetCategoriesQuery.PageNumber">
            <summary>
            Gets or sets the page number (1-based).
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.CategoryManagement.GetCategoriesQuery.PageSize">
            <summary>
            Gets or sets the number of items per page.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.CategoryManagement.GetCategoriesQuery.SearchTerm">
            <summary>
            Gets or sets the search term for filtering categories.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.CategoryManagement.GetCategoriesQuery.SortBy">
            <summary>
            Gets or sets the field to sort by.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.CategoryManagement.GetCategoriesQuery.SortOrder">
            <summary>
            Gets or sets the sort order (asc or desc).
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Queries.CategoryManagement.GetCategoryQuery">
            <summary>
            Query for retrieving a specific category by ID.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.CategoryManagement.GetCategoryQuery.Id">
            <summary>
            Gets or sets the unique identifier of the category.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Queries.CategoryManagement.GetCategoryWithProductsQuery">
            <summary>
            Query for retrieving a category with all its associated products.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.CategoryManagement.GetCategoryWithProductsQuery.Id">
            <summary>
            Gets or sets the unique identifier of the category.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Queries.CategoryManagement.SearchCategoriesQuery">
            <summary>
            Query for searching categories based on a search term.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.CategoryManagement.SearchCategoriesQuery.SearchTerm">
            <summary>
            Gets or sets the search term.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.CategoryManagement.SearchCategoriesQuery.PageNumber">
            <summary>
            Gets or sets the page number (1-based).
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.CategoryManagement.SearchCategoriesQuery.PageSize">
            <summary>
            Gets or sets the number of items per page.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Queries.ProductVariantManagement.GetProductVariantQuery">
            <summary>
            Query for retrieving a single product variant by ID.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.ProductVariantManagement.GetProductVariantQuery.Id">
            <summary>
            Gets or sets the unique identifier of the product variant.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Queries.ProductVariantManagement.GetProductVariantsQuery">
            <summary>
            Query for retrieving a list of product variants with optional filtering and pagination.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.ProductVariantManagement.GetProductVariantsQuery.BaseProductId">
            <summary>
            Gets or sets the base product ID for filtering.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.ProductVariantManagement.GetProductVariantsQuery.SearchTerm">
            <summary>
            Gets or sets the search term for filtering product variants by name.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.ProductVariantManagement.GetProductVariantsQuery.UnitOfMeasureId">
            <summary>
            Gets or sets the unit of measure ID for filtering.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.ProductVariantManagement.GetProductVariantsQuery.PageNumber">
            <summary>
            Gets or sets the page number for pagination (1-based).
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.ProductVariantManagement.GetProductVariantsQuery.PageSize">
            <summary>
            Gets or sets the page size for pagination.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Queries.ShoppingCartManagement.GetShoppingCartQuery">
            <summary>
            Query for retrieving a user's shopping cart items.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.ShoppingCartManagement.GetShoppingCartQuery.UserId">
            <summary>
            Gets or sets the user ID.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Queries.UnitManagement.GetUnitQuery">
            <summary>
            Query for retrieving a single unit by ID.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.UnitManagement.GetUnitQuery.Id">
            <summary>
            Gets or sets the unique identifier of the unit to retrieve.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Queries.UnitManagement.GetUnitsQuery">
            <summary>
            Query for retrieving all units.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Queries.UnitManagement.GetUnitTypeQuery">
            <summary>
            Query for retrieving a single unit type by ID.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.UnitManagement.GetUnitTypeQuery.Id">
            <summary>
            Gets or sets the unique identifier of the unit type to retrieve.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Queries.UnitManagement.GetUnitTypesQuery">
            <summary>
            Query for retrieving all unit types.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Queries.UnitOfMeasureManagement.GetUnitOfMeasureQuery">
            <summary>
            Query for getting a unit of measure by ID.
            </summary>
        </member>
        <member name="P:FunnyActivities.Application.Queries.UnitOfMeasureManagement.GetUnitOfMeasureQuery.Id">
            <summary>
            Gets or sets the unique identifier of the unit.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Queries.UnitOfMeasureManagement.GetUnitOfMeasuresQuery">
            <summary>
            Query for getting all units of measure.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Validators.BaseProductManagement.CreateBaseProductCommandValidator">
            <summary>
            Validator for CreateBaseProductCommand.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Validators.BaseProductManagement.CreateBaseProductCommandValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Validators.BaseProductManagement.CreateBaseProductCommandValidator"/> class.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Validators.BaseProductManagement.DeleteBaseProductCommandValidator">
            <summary>
            Validator for DeleteBaseProductCommand.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Validators.BaseProductManagement.DeleteBaseProductCommandValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Validators.BaseProductManagement.DeleteBaseProductCommandValidator"/> class.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Validators.BaseProductManagement.GetBaseProductQueryValidator">
            <summary>
            Validator for GetBaseProductQuery.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Validators.BaseProductManagement.GetBaseProductQueryValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Validators.BaseProductManagement.GetBaseProductQueryValidator"/> class.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Validators.BaseProductManagement.GetBaseProductsQueryValidator">
            <summary>
            Validator for GetBaseProductsQuery.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Validators.BaseProductManagement.GetBaseProductsQueryValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Validators.BaseProductManagement.GetBaseProductsQueryValidator"/> class.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Validators.BaseProductManagement.UpdateBaseProductCommandValidator">
            <summary>
            Validator for UpdateBaseProductCommand.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Validators.BaseProductManagement.UpdateBaseProductCommandValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Validators.BaseProductManagement.UpdateBaseProductCommandValidator"/> class.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Validators.CategoryManagement.CreateCategoryCommandValidator">
            <summary>
            Validator for CreateCategoryCommand.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Validators.CategoryManagement.CreateCategoryCommandValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Validators.CategoryManagement.CreateCategoryCommandValidator"/> class.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Validators.CategoryManagement.DeleteCategoryCommandValidator">
            <summary>
            Validator for DeleteCategoryCommand.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Validators.CategoryManagement.DeleteCategoryCommandValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Validators.CategoryManagement.DeleteCategoryCommandValidator"/> class.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Validators.CategoryManagement.GetCategoriesQueryValidator">
            <summary>
            Validator for GetCategoriesQuery.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Validators.CategoryManagement.GetCategoriesQueryValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Validators.CategoryManagement.GetCategoriesQueryValidator"/> class.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Validators.CategoryManagement.GetCategoryQueryValidator">
            <summary>
            Validator for GetCategoryQuery.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Validators.CategoryManagement.GetCategoryQueryValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Validators.CategoryManagement.GetCategoryQueryValidator"/> class.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Validators.CategoryManagement.GetCategoryWithProductsQueryValidator">
            <summary>
            Validator for GetCategoryWithProductsQuery.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Validators.CategoryManagement.GetCategoryWithProductsQueryValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Validators.CategoryManagement.GetCategoryWithProductsQueryValidator"/> class.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Validators.CategoryManagement.SearchCategoriesQueryValidator">
            <summary>
            Validator for SearchCategoriesQuery.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Validators.CategoryManagement.SearchCategoriesQueryValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Validators.CategoryManagement.SearchCategoriesQueryValidator"/> class.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Validators.CategoryManagement.UpdateCategoryCommandValidator">
            <summary>
            Validator for UpdateCategoryCommand.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Validators.CategoryManagement.UpdateCategoryCommandValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Validators.CategoryManagement.UpdateCategoryCommandValidator"/> class.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Validators.ProductVariantManagement.CreateProductVariantCommandValidator">
            <summary>
            Validator for CreateProductVariantCommand.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Validators.ProductVariantManagement.CreateProductVariantCommandValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Validators.ProductVariantManagement.CreateProductVariantCommandValidator"/> class.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Validators.ProductVariantManagement.DeleteProductVariantCommandValidator">
            <summary>
            Validator for DeleteProductVariantCommand.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Validators.ProductVariantManagement.DeleteProductVariantCommandValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Validators.ProductVariantManagement.DeleteProductVariantCommandValidator"/> class.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Validators.ProductVariantManagement.GetProductVariantQueryValidator">
            <summary>
            Validator for GetProductVariantQuery.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Validators.ProductVariantManagement.GetProductVariantQueryValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Validators.ProductVariantManagement.GetProductVariantQueryValidator"/> class.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Validators.ProductVariantManagement.GetProductVariantsQueryValidator">
            <summary>
            Validator for GetProductVariantsQuery.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Validators.ProductVariantManagement.GetProductVariantsQueryValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Validators.ProductVariantManagement.GetProductVariantsQueryValidator"/> class.
            </summary>
        </member>
        <member name="T:FunnyActivities.Application.Validators.ProductVariantManagement.UpdateProductVariantCommandValidator">
            <summary>
            Validator for UpdateProductVariantCommand.
            </summary>
        </member>
        <member name="M:FunnyActivities.Application.Validators.ProductVariantManagement.UpdateProductVariantCommandValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FunnyActivities.Application.Validators.ProductVariantManagement.UpdateProductVariantCommandValidator"/> class.
            </summary>
        </member>
    </members>
</doc>
