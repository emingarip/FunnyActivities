name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  BUILD_CONFIGURATION: 'Release'
  # MinIO Configuration for image storage
  # Ensure MinIO is configured in deployment environments
  # For Azure: Consider using Azure Blob Storage as alternative
  # For local/dev: Use docker-compose with MinIO service

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build-artifact: publish
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Restore dependencies
      run: dotnet restore FunnyActivities.sln
    - name: Build
      run: dotnet build FunnyActivities.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
    - name: Publish
      run: dotnet publish FunnyActivities.WebAPI/FunnyActivities.WebAPI.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --output ./publish --no-build
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: publish-artifact
        path: ./publish

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Restore dependencies
      run: dotnet restore FunnyActivities.sln
    - name: Run unit tests
      run: dotnet test FunnyActivities.Domain.UnitTests/FunnyActivities.Domain.UnitTests.csproj FunnyActivities.Application.UnitTests/FunnyActivities.Application.UnitTests.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore --verbosity normal --collect:"XPlat Code Coverage" --settings coverlet.runsettings --results-directory ./TestResults
    - name: Run integration tests
      run: dotnet test FunnyActivities.IntegrationTests/FunnyActivities.IntegrationTests.csproj FunnyActivities.Api.IntegrationTests/FunnyActivities.Api.IntegrationTests.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore --verbosity normal --collect:"XPlat Code Coverage" --settings coverlet.runsettings --results-directory ./TestResults
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: ./TestResults/**/*.xml

  sonar:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports
        path: ./TestResults
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@v2
      with:
        args: >
          -Dsonar.organization=your-org
          -Dsonar.projectKey=your-project-key
          -Dsonar.sources=.
          -Dsonar.exclusions=**/bin/**,**/obj/**,**/TestResults/**,**/publish/**
          -Dsonar.cs.coverage.reportsPaths=./TestResults/**/*.cobertura.xml
          -Dsonar.test.inclusions=**/*Tests*/**/*.cs
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy-dev:
    runs-on: ubuntu-latest
    needs: [build, test, sonar]
    environment: dev
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: publish-artifact
        path: ./publish
    - name: Deploy to Azure App Service (Dev)
      uses: azure/webapps-deploy@v3
      with:
        app-name: funnyactivities-dev
        slot-name: production
        publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE_DEV }}
        package: ./publish

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, test, sonar]
    environment: staging
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: publish-artifact
        path: ./publish
    - name: Deploy to Azure App Service (Staging)
      uses: azure/webapps-deploy@v3
      with:
        app-name: funnyactivities-staging
        slot-name: production
        publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE_STAGING }}
        package: ./publish

  deploy-prod:
    runs-on: ubuntu-latest
    needs: [build, test, sonar]
    environment:
      name: prod
      url: https://funnyactivities-prod.azurewebsites.net
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: publish-artifact
        path: ./publish
    - name: Deploy to Azure App Service (Prod)
      uses: azure/webapps-deploy@v3
      with:
        app-name: funnyactivities-prod
        slot-name: production
        publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE_PROD }}
        package: ./publish

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: failure()
    steps:
    - name: Send Slack notification
      uses: slackapi/slack-github-action@v1.26.0
      with:
        channel-id: 'your-channel-id'
        slack-message: "CI/CD Pipeline failed: ${{ github.workflow }} - ${{ github.run_id }} - ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}